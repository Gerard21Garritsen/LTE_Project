
LTE_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005048  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005488  08005488  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08005488  08005488  00015488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005490  08005490  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08005498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000100  08005598  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08005598  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009fb6  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bba  00000000  00000000  0002a129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  0002bce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000654  00000000  00000000  0002c528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016824  00000000  00000000  0002cb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d55  00000000  00000000  000433a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088a8a  00000000  00000000  0004d0f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b20  00000000  00000000  000d5b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000d86a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051d0 	.word	0x080051d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	080051d0 	.word	0x080051d0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <A7670xx_setBaudRate>:


//define functions

void A7670xx_setBaudRate(UART_HandleTypeDef *huart, char *baud)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	//This function set up LTE baud rate
	char data[10], command[20];

	strcpy(command, Baud_Configure);
 80005b6:	4a1a      	ldr	r2, [pc, #104]	; (8000620 <A7670xx_setBaudRate+0x74>)
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c0:	e883 0003 	stmia.w	r3, {r0, r1}

	strcat(command, baud);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	6839      	ldr	r1, [r7, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 febd 	bl	800434a <strcat>
	strcat(command, "\r\n");
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fe0d 	bl	80001f4 <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	4413      	add	r3, r2
 80005e4:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <A7670xx_setBaudRate+0x78>)
 80005e6:	8811      	ldrh	r1, [r2, #0]
 80005e8:	7892      	ldrb	r2, [r2, #2]
 80005ea:	8019      	strh	r1, [r3, #0]
 80005ec:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(huart, (uint8_t*)command, strlen(command), 20);
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fdfe 	bl	80001f4 <strlen>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f107 0108 	add.w	r1, r7, #8
 8000600:	2314      	movs	r3, #20
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f002 fcf7 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)data, sizeof(data), 100);
 8000608:	f107 011c 	add.w	r1, r7, #28
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	220a      	movs	r2, #10
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f002 fd7b 	bl	800310c <HAL_UART_Receive>
}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	; 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	08005334 	.word	0x08005334
 8000624:	080051e8 	.word	0x080051e8

08000628 <A7670xx_disableEcho>:


void A7670xx_disableEcho(UART_HandleTypeDef *huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	//This function disable Echo in commands
	char data[10];

	HAL_UART_Transmit(huart, (uint8_t*)Echo_Disable, strlen(Echo_Disable), 20);
 8000630:	2314      	movs	r3, #20
 8000632:	2206      	movs	r2, #6
 8000634:	4907      	ldr	r1, [pc, #28]	; (8000654 <A7670xx_disableEcho+0x2c>)
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f002 fcdd 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)data, sizeof(data), 100);
 800063c:	f107 010c 	add.w	r1, r7, #12
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	220a      	movs	r2, #10
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f002 fd61 	bl	800310c <HAL_UART_Receive>
}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	0800530c 	.word	0x0800530c

08000658 <A7670xx_thereisSIMCard>:


char* A7670xx_thereisSIMCard(UART_HandleTypeDef *huart)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	//This function ask if LTE module has a SIM Card plugged

	static char read[20];
	char *data;
	uint8_t count1 = 0, count2 = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	72fb      	strb	r3, [r7, #11]
 8000664:	2300      	movs	r3, #0
 8000666:	72bb      	strb	r3, [r7, #10]

	HAL_UART_Transmit(huart, (uint8_t*)Ask_SIM, strlen(Ask_SIM), 20);
 8000668:	2314      	movs	r3, #20
 800066a:	2209      	movs	r2, #9
 800066c:	4927      	ldr	r1, [pc, #156]	; (800070c <A7670xx_thereisSIMCard+0xb4>)
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f002 fcc1 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)read, sizeof(read), 50);
 8000674:	2332      	movs	r3, #50	; 0x32
 8000676:	2214      	movs	r2, #20
 8000678:	4925      	ldr	r1, [pc, #148]	; (8000710 <A7670xx_thereisSIMCard+0xb8>)
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f002 fd46 	bl	800310c <HAL_UART_Receive>

	//return string if there is a SIM Card Plugged

	while(count1 < strlen(read))
 8000680:	e008      	b.n	8000694 <A7670xx_thereisSIMCard+0x3c>
	{
		if(isdigit(read[count1]) != NULL)
 8000682:	7afb      	ldrb	r3, [r7, #11]
 8000684:	4a22      	ldr	r2, [pc, #136]	; (8000710 <A7670xx_thereisSIMCard+0xb8>)
 8000686:	5cd3      	ldrb	r3, [r2, r3]
 8000688:	3b30      	subs	r3, #48	; 0x30
 800068a:	2b09      	cmp	r3, #9
 800068c:	d90a      	bls.n	80006a4 <A7670xx_thereisSIMCard+0x4c>
			break;

		count1++;
 800068e:	7afb      	ldrb	r3, [r7, #11]
 8000690:	3301      	adds	r3, #1
 8000692:	72fb      	strb	r3, [r7, #11]
	while(count1 < strlen(read))
 8000694:	7afc      	ldrb	r4, [r7, #11]
 8000696:	481e      	ldr	r0, [pc, #120]	; (8000710 <A7670xx_thereisSIMCard+0xb8>)
 8000698:	f7ff fdac 	bl	80001f4 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	429c      	cmp	r4, r3
 80006a0:	d3ef      	bcc.n	8000682 <A7670xx_thereisSIMCard+0x2a>
 80006a2:	e012      	b.n	80006ca <A7670xx_thereisSIMCard+0x72>
			break;
 80006a4:	bf00      	nop
	}


	while(count2 < strlen(read))
 80006a6:	e010      	b.n	80006ca <A7670xx_thereisSIMCard+0x72>
	{
		if(read[count2] == '\r' && count2 > count1)
 80006a8:	7abb      	ldrb	r3, [r7, #10]
 80006aa:	4a19      	ldr	r2, [pc, #100]	; (8000710 <A7670xx_thereisSIMCard+0xb8>)
 80006ac:	5cd3      	ldrb	r3, [r2, r3]
 80006ae:	2b0d      	cmp	r3, #13
 80006b0:	d108      	bne.n	80006c4 <A7670xx_thereisSIMCard+0x6c>
 80006b2:	7aba      	ldrb	r2, [r7, #10]
 80006b4:	7afb      	ldrb	r3, [r7, #11]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d904      	bls.n	80006c4 <A7670xx_thereisSIMCard+0x6c>
		{
			read[count2] = '\0';
 80006ba:	7abb      	ldrb	r3, [r7, #10]
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <A7670xx_thereisSIMCard+0xb8>)
 80006be:	2100      	movs	r1, #0
 80006c0:	54d1      	strb	r1, [r2, r3]

			break;
 80006c2:	e009      	b.n	80006d8 <A7670xx_thereisSIMCard+0x80>
		}

		count2++;
 80006c4:	7abb      	ldrb	r3, [r7, #10]
 80006c6:	3301      	adds	r3, #1
 80006c8:	72bb      	strb	r3, [r7, #10]
	while(count2 < strlen(read))
 80006ca:	7abc      	ldrb	r4, [r7, #10]
 80006cc:	4810      	ldr	r0, [pc, #64]	; (8000710 <A7670xx_thereisSIMCard+0xb8>)
 80006ce:	f7ff fd91 	bl	80001f4 <strlen>
 80006d2:	4603      	mov	r3, r0
 80006d4:	429c      	cmp	r4, r3
 80006d6:	d3e7      	bcc.n	80006a8 <A7670xx_thereisSIMCard+0x50>
	}

	if(strchr(read, '+') != NULL) //SIM Card isn't plugged
 80006d8:	212b      	movs	r1, #43	; 0x2b
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <A7670xx_thereisSIMCard+0xb8>)
 80006dc:	f003 fe44 	bl	8004368 <strchr>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d005      	beq.n	80006f2 <A7670xx_thereisSIMCard+0x9a>
		data = strstr(read, "ERROR");
 80006e6:	490b      	ldr	r1, [pc, #44]	; (8000714 <A7670xx_thereisSIMCard+0xbc>)
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <A7670xx_thereisSIMCard+0xb8>)
 80006ea:	f003 feb9 	bl	8004460 <strstr>
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	e007      	b.n	8000702 <A7670xx_thereisSIMCard+0xaa>
	else
		data = strchr(read, read[count1]);
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <A7670xx_thereisSIMCard+0xb8>)
 80006f6:	5cd3      	ldrb	r3, [r2, r3]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <A7670xx_thereisSIMCard+0xb8>)
 80006fc:	f003 fe34 	bl	8004368 <strchr>
 8000700:	60f8      	str	r0, [r7, #12]

	return data;
 8000702:	68fb      	ldr	r3, [r7, #12]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	080052c0 	.word	0x080052c0
 8000710:	2000011c 	.word	0x2000011c
 8000714:	080051ec 	.word	0x080051ec

08000718 <A7670xx_getMobileOperator>:
	return data;
}


char* A7670xx_getMobileOperator(UART_HandleTypeDef *huart)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	//This function gets Mobile Operator

	static char read[30];
	char *data, *operator, *token;
	uint8_t count = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	74fb      	strb	r3, [r7, #19]

	HAL_UART_Transmit(huart, (uint8_t*)Ask_CSPN, strlen(Ask_CSPN), 20);
 8000724:	2314      	movs	r3, #20
 8000726:	220a      	movs	r2, #10
 8000728:	492f      	ldr	r1, [pc, #188]	; (80007e8 <A7670xx_getMobileOperator+0xd0>)
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f002 fc63 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)read, sizeof(read), 50);
 8000730:	2332      	movs	r3, #50	; 0x32
 8000732:	221e      	movs	r2, #30
 8000734:	492d      	ldr	r1, [pc, #180]	; (80007ec <A7670xx_getMobileOperator+0xd4>)
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f002 fce8 	bl	800310c <HAL_UART_Receive>

	while(count <= strlen(read))
 800073c:	e00f      	b.n	800075e <A7670xx_getMobileOperator+0x46>
	{
		if(read[count] == '\r' && count > 4)
 800073e:	7cfb      	ldrb	r3, [r7, #19]
 8000740:	4a2a      	ldr	r2, [pc, #168]	; (80007ec <A7670xx_getMobileOperator+0xd4>)
 8000742:	5cd3      	ldrb	r3, [r2, r3]
 8000744:	2b0d      	cmp	r3, #13
 8000746:	d107      	bne.n	8000758 <A7670xx_getMobileOperator+0x40>
 8000748:	7cfb      	ldrb	r3, [r7, #19]
 800074a:	2b04      	cmp	r3, #4
 800074c:	d904      	bls.n	8000758 <A7670xx_getMobileOperator+0x40>
		{
			read[count] = '\0';
 800074e:	7cfb      	ldrb	r3, [r7, #19]
 8000750:	4a26      	ldr	r2, [pc, #152]	; (80007ec <A7670xx_getMobileOperator+0xd4>)
 8000752:	2100      	movs	r1, #0
 8000754:	54d1      	strb	r1, [r2, r3]

			break;
 8000756:	e009      	b.n	800076c <A7670xx_getMobileOperator+0x54>
		}

		count++;
 8000758:	7cfb      	ldrb	r3, [r7, #19]
 800075a:	3301      	adds	r3, #1
 800075c:	74fb      	strb	r3, [r7, #19]
	while(count <= strlen(read))
 800075e:	7cfc      	ldrb	r4, [r7, #19]
 8000760:	4822      	ldr	r0, [pc, #136]	; (80007ec <A7670xx_getMobileOperator+0xd4>)
 8000762:	f7ff fd47 	bl	80001f4 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	429c      	cmp	r4, r3
 800076a:	d9e8      	bls.n	800073e <A7670xx_getMobileOperator+0x26>
	}

	//gets data

	operator = strchr(read, '+');
 800076c:	212b      	movs	r1, #43	; 0x2b
 800076e:	481f      	ldr	r0, [pc, #124]	; (80007ec <A7670xx_getMobileOperator+0xd4>)
 8000770:	f003 fdfa 	bl	8004368 <strchr>
 8000774:	60f8      	str	r0, [r7, #12]

	if(strncmp(operator, "+CSPN", 5) == 0)
 8000776:	2205      	movs	r2, #5
 8000778:	491d      	ldr	r1, [pc, #116]	; (80007f0 <A7670xx_getMobileOperator+0xd8>)
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f003 fe01 	bl	8004382 <strncmp>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d125      	bne.n	80007d2 <A7670xx_getMobileOperator+0xba>
	{
		operator = strstr(read, "\""); //get only data
 8000786:	2122      	movs	r1, #34	; 0x22
 8000788:	4818      	ldr	r0, [pc, #96]	; (80007ec <A7670xx_getMobileOperator+0xd4>)
 800078a:	f003 fded 	bl	8004368 <strchr>
 800078e:	60f8      	str	r0, [r7, #12]

		token = strtok(operator, ","); //split by comma
 8000790:	4918      	ldr	r1, [pc, #96]	; (80007f4 <A7670xx_getMobileOperator+0xdc>)
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f003 fe08 	bl	80043a8 <strtok>
 8000798:	60b8      	str	r0, [r7, #8]

		data = token; //get data
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	617b      	str	r3, [r7, #20]

		for(uint8_t i = 0; i < strlen(data); i++) //if mobile operator name has a blank space, fill it with '_'
 800079e:	2300      	movs	r3, #0
 80007a0:	74bb      	strb	r3, [r7, #18]
 80007a2:	e00e      	b.n	80007c2 <A7670xx_getMobileOperator+0xaa>
		{
			if(*(data + i) == ' ')
 80007a4:	7cbb      	ldrb	r3, [r7, #18]
 80007a6:	697a      	ldr	r2, [r7, #20]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b20      	cmp	r3, #32
 80007ae:	d105      	bne.n	80007bc <A7670xx_getMobileOperator+0xa4>
			{
				*(data + i) = '_';
 80007b0:	7cbb      	ldrb	r3, [r7, #18]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	4413      	add	r3, r2
 80007b6:	225f      	movs	r2, #95	; 0x5f
 80007b8:	701a      	strb	r2, [r3, #0]

				break;
 80007ba:	e00f      	b.n	80007dc <A7670xx_getMobileOperator+0xc4>
		for(uint8_t i = 0; i < strlen(data); i++) //if mobile operator name has a blank space, fill it with '_'
 80007bc:	7cbb      	ldrb	r3, [r7, #18]
 80007be:	3301      	adds	r3, #1
 80007c0:	74bb      	strb	r3, [r7, #18]
 80007c2:	7cbc      	ldrb	r4, [r7, #18]
 80007c4:	6978      	ldr	r0, [r7, #20]
 80007c6:	f7ff fd15 	bl	80001f4 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	429c      	cmp	r4, r3
 80007ce:	d3e9      	bcc.n	80007a4 <A7670xx_getMobileOperator+0x8c>
 80007d0:	e004      	b.n	80007dc <A7670xx_getMobileOperator+0xc4>
			}
		}
	}
	else
		data = strstr(read, "ERROR");
 80007d2:	4909      	ldr	r1, [pc, #36]	; (80007f8 <A7670xx_getMobileOperator+0xe0>)
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <A7670xx_getMobileOperator+0xd4>)
 80007d6:	f003 fe43 	bl	8004460 <strstr>
 80007da:	6178      	str	r0, [r7, #20]

	return data;
 80007dc:	697b      	ldr	r3, [r7, #20]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	371c      	adds	r7, #28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd90      	pop	{r4, r7, pc}
 80007e6:	bf00      	nop
 80007e8:	080052cc 	.word	0x080052cc
 80007ec:	20000130 	.word	0x20000130
 80007f0:	080051fc 	.word	0x080051fc
 80007f4:	08005204 	.word	0x08005204
 80007f8:	080051ec 	.word	0x080051ec

080007fc <A7670xx_getICCID>:


char* A7670xx_getICCID(UART_HandleTypeDef *huart)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	//This function gets ICCID data from SIM Card (Impressed code over SIM)
	static char buffer[30];
	char *data;
	uint8_t counter = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(huart, (uint8_t*)Ask_ICCID, strlen(Ask_ICCID) , 20);
 8000808:	2314      	movs	r3, #20
 800080a:	220b      	movs	r2, #11
 800080c:	492a      	ldr	r1, [pc, #168]	; (80008b8 <A7670xx_getICCID+0xbc>)
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f002 fbf1 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)buffer, sizeof(buffer), 50);
 8000814:	2332      	movs	r3, #50	; 0x32
 8000816:	221e      	movs	r2, #30
 8000818:	4928      	ldr	r1, [pc, #160]	; (80008bc <A7670xx_getICCID+0xc0>)
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f002 fc76 	bl	800310c <HAL_UART_Receive>

	//define end string
	while(counter < strlen(buffer))
 8000820:	e00f      	b.n	8000842 <A7670xx_getICCID+0x46>
	{
		if(buffer[counter] == '\r' && counter > 4)
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	4a25      	ldr	r2, [pc, #148]	; (80008bc <A7670xx_getICCID+0xc0>)
 8000826:	5cd3      	ldrb	r3, [r2, r3]
 8000828:	2b0d      	cmp	r3, #13
 800082a:	d107      	bne.n	800083c <A7670xx_getICCID+0x40>
 800082c:	7afb      	ldrb	r3, [r7, #11]
 800082e:	2b04      	cmp	r3, #4
 8000830:	d904      	bls.n	800083c <A7670xx_getICCID+0x40>
		{
			buffer[counter] = '\0';
 8000832:	7afb      	ldrb	r3, [r7, #11]
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <A7670xx_getICCID+0xc0>)
 8000836:	2100      	movs	r1, #0
 8000838:	54d1      	strb	r1, [r2, r3]

			break;
 800083a:	e009      	b.n	8000850 <A7670xx_getICCID+0x54>
		}

		counter++;
 800083c:	7afb      	ldrb	r3, [r7, #11]
 800083e:	3301      	adds	r3, #1
 8000840:	72fb      	strb	r3, [r7, #11]
	while(counter < strlen(buffer))
 8000842:	7afc      	ldrb	r4, [r7, #11]
 8000844:	481d      	ldr	r0, [pc, #116]	; (80008bc <A7670xx_getICCID+0xc0>)
 8000846:	f7ff fcd5 	bl	80001f4 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	429c      	cmp	r4, r3
 800084e:	d3e8      	bcc.n	8000822 <A7670xx_getICCID+0x26>
	}

	counter = 0; //clear counter
 8000850:	2300      	movs	r3, #0
 8000852:	72fb      	strb	r3, [r7, #11]

	data = strchr(buffer, '+'); //get string from '+' character
 8000854:	212b      	movs	r1, #43	; 0x2b
 8000856:	4819      	ldr	r0, [pc, #100]	; (80008bc <A7670xx_getICCID+0xc0>)
 8000858:	f003 fd86 	bl	8004368 <strchr>
 800085c:	60f8      	str	r0, [r7, #12]

	if(strncmp(data, "+ICCID", 6) == 0)
 800085e:	2206      	movs	r2, #6
 8000860:	4917      	ldr	r1, [pc, #92]	; (80008c0 <A7670xx_getICCID+0xc4>)
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f003 fd8d 	bl	8004382 <strncmp>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d119      	bne.n	80008a2 <A7670xx_getICCID+0xa6>
	{
		while(buffer[counter] != ' ' && counter < strlen(buffer))
 800086e:	e002      	b.n	8000876 <A7670xx_getICCID+0x7a>
			counter++;
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	3301      	adds	r3, #1
 8000874:	72fb      	strb	r3, [r7, #11]
		while(buffer[counter] != ' ' && counter < strlen(buffer))
 8000876:	7afb      	ldrb	r3, [r7, #11]
 8000878:	4a10      	ldr	r2, [pc, #64]	; (80008bc <A7670xx_getICCID+0xc0>)
 800087a:	5cd3      	ldrb	r3, [r2, r3]
 800087c:	2b20      	cmp	r3, #32
 800087e:	d006      	beq.n	800088e <A7670xx_getICCID+0x92>
 8000880:	7afc      	ldrb	r4, [r7, #11]
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <A7670xx_getICCID+0xc0>)
 8000884:	f7ff fcb6 	bl	80001f4 <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	429c      	cmp	r4, r3
 800088c:	d3f0      	bcc.n	8000870 <A7670xx_getICCID+0x74>

		data = strchr(buffer, buffer[counter + 1]);
 800088e:	7afb      	ldrb	r3, [r7, #11]
 8000890:	3301      	adds	r3, #1
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <A7670xx_getICCID+0xc0>)
 8000894:	5cd3      	ldrb	r3, [r2, r3]
 8000896:	4619      	mov	r1, r3
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <A7670xx_getICCID+0xc0>)
 800089a:	f003 fd65 	bl	8004368 <strchr>
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	e004      	b.n	80008ac <A7670xx_getICCID+0xb0>
	}
	else
		data = strstr(buffer, "ERROR");
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <A7670xx_getICCID+0xc8>)
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <A7670xx_getICCID+0xc0>)
 80008a6:	f003 fddb 	bl	8004460 <strstr>
 80008aa:	60f8      	str	r0, [r7, #12]

	return data;
 80008ac:	68fb      	ldr	r3, [r7, #12]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd90      	pop	{r4, r7, pc}
 80008b6:	bf00      	nop
 80008b8:	080052d8 	.word	0x080052d8
 80008bc:	20000150 	.word	0x20000150
 80008c0:	08005208 	.word	0x08005208
 80008c4:	080051ec 	.word	0x080051ec

080008c8 <A7670xx_getMobileNumber>:


char* A7670xx_getMobileNumber(UART_HandleTypeDef *huart)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	//This function gets current Mobile Number
	static char buffer[30];
	char *number, *token, *data;
	uint8_t counter = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	74fb      	strb	r3, [r7, #19]

	HAL_UART_Transmit(huart, (uint8_t*)Ask_NUM, strlen(Ask_NUM), 20);
 80008d4:	2314      	movs	r3, #20
 80008d6:	2209      	movs	r2, #9
 80008d8:	4925      	ldr	r1, [pc, #148]	; (8000970 <A7670xx_getMobileNumber+0xa8>)
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f002 fb8b 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)buffer, sizeof(buffer), 50);
 80008e0:	2332      	movs	r3, #50	; 0x32
 80008e2:	221e      	movs	r2, #30
 80008e4:	4923      	ldr	r1, [pc, #140]	; (8000974 <A7670xx_getMobileNumber+0xac>)
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f002 fc10 	bl	800310c <HAL_UART_Receive>

	while(counter < strlen(buffer))
 80008ec:	e00f      	b.n	800090e <A7670xx_getMobileNumber+0x46>
	{
		if(buffer[counter] == '\r' && counter > 4)
 80008ee:	7cfb      	ldrb	r3, [r7, #19]
 80008f0:	4a20      	ldr	r2, [pc, #128]	; (8000974 <A7670xx_getMobileNumber+0xac>)
 80008f2:	5cd3      	ldrb	r3, [r2, r3]
 80008f4:	2b0d      	cmp	r3, #13
 80008f6:	d107      	bne.n	8000908 <A7670xx_getMobileNumber+0x40>
 80008f8:	7cfb      	ldrb	r3, [r7, #19]
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d904      	bls.n	8000908 <A7670xx_getMobileNumber+0x40>
		{
			buffer[counter] = '\0';
 80008fe:	7cfb      	ldrb	r3, [r7, #19]
 8000900:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <A7670xx_getMobileNumber+0xac>)
 8000902:	2100      	movs	r1, #0
 8000904:	54d1      	strb	r1, [r2, r3]

			break;
 8000906:	e009      	b.n	800091c <A7670xx_getMobileNumber+0x54>
		}

		counter++;
 8000908:	7cfb      	ldrb	r3, [r7, #19]
 800090a:	3301      	adds	r3, #1
 800090c:	74fb      	strb	r3, [r7, #19]
	while(counter < strlen(buffer))
 800090e:	7cfc      	ldrb	r4, [r7, #19]
 8000910:	4818      	ldr	r0, [pc, #96]	; (8000974 <A7670xx_getMobileNumber+0xac>)
 8000912:	f7ff fc6f 	bl	80001f4 <strlen>
 8000916:	4603      	mov	r3, r0
 8000918:	429c      	cmp	r4, r3
 800091a:	d3e8      	bcc.n	80008ee <A7670xx_getMobileNumber+0x26>
	}

	number = strchr(buffer, '+');
 800091c:	212b      	movs	r1, #43	; 0x2b
 800091e:	4815      	ldr	r0, [pc, #84]	; (8000974 <A7670xx_getMobileNumber+0xac>)
 8000920:	f003 fd22 	bl	8004368 <strchr>
 8000924:	60f8      	str	r0, [r7, #12]

	if(strncmp(number, "+CNUM", 5) == 0)
 8000926:	2205      	movs	r2, #5
 8000928:	4913      	ldr	r1, [pc, #76]	; (8000978 <A7670xx_getMobileNumber+0xb0>)
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f003 fd29 	bl	8004382 <strncmp>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d111      	bne.n	800095a <A7670xx_getMobileNumber+0x92>
	{
		number = strstr(buffer, " ");
 8000936:	2120      	movs	r1, #32
 8000938:	480e      	ldr	r0, [pc, #56]	; (8000974 <A7670xx_getMobileNumber+0xac>)
 800093a:	f003 fd15 	bl	8004368 <strchr>
 800093e:	60f8      	str	r0, [r7, #12]

		token = strtok(number, ",");
 8000940:	490e      	ldr	r1, [pc, #56]	; (800097c <A7670xx_getMobileNumber+0xb4>)
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f003 fd30 	bl	80043a8 <strtok>
 8000948:	60b8      	str	r0, [r7, #8]

		token = strtok(NULL, ",");
 800094a:	490c      	ldr	r1, [pc, #48]	; (800097c <A7670xx_getMobileNumber+0xb4>)
 800094c:	2000      	movs	r0, #0
 800094e:	f003 fd2b 	bl	80043a8 <strtok>
 8000952:	60b8      	str	r0, [r7, #8]

		data = token; //get mobile number
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e004      	b.n	8000964 <A7670xx_getMobileNumber+0x9c>

	}
	else
		data = strstr(buffer, "ERROR");
 800095a:	4909      	ldr	r1, [pc, #36]	; (8000980 <A7670xx_getMobileNumber+0xb8>)
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <A7670xx_getMobileNumber+0xac>)
 800095e:	f003 fd7f 	bl	8004460 <strstr>
 8000962:	6178      	str	r0, [r7, #20]

	return data;
 8000964:	697b      	ldr	r3, [r7, #20]
}
 8000966:	4618      	mov	r0, r3
 8000968:	371c      	adds	r7, #28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}
 800096e:	bf00      	nop
 8000970:	080052e4 	.word	0x080052e4
 8000974:	20000170 	.word	0x20000170
 8000978:	08005210 	.word	0x08005210
 800097c:	08005204 	.word	0x08005204
 8000980:	080051ec 	.word	0x080051ec

08000984 <A7670xx_networkStatus>:


char* A7670xx_networkStatus(UART_HandleTypeDef *huart)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	//This function ask for Network status

	static char read[20];
	char *data;
	uint8_t count = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(huart, (uint8_t*)Ask_CGATT, strlen(Ask_CGATT), 20);
 8000990:	2314      	movs	r3, #20
 8000992:	220b      	movs	r2, #11
 8000994:	4915      	ldr	r1, [pc, #84]	; (80009ec <A7670xx_networkStatus+0x68>)
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f002 fb2d 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)read, sizeof(read), 50);
 800099c:	2332      	movs	r3, #50	; 0x32
 800099e:	2214      	movs	r2, #20
 80009a0:	4913      	ldr	r1, [pc, #76]	; (80009f0 <A7670xx_networkStatus+0x6c>)
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f002 fbb2 	bl	800310c <HAL_UART_Receive>

	while(count <= strlen(read))
 80009a8:	e00f      	b.n	80009ca <A7670xx_networkStatus+0x46>
	{
		if(read[count] == '\r' && count > 4)
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <A7670xx_networkStatus+0x6c>)
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	2b0d      	cmp	r3, #13
 80009b2:	d107      	bne.n	80009c4 <A7670xx_networkStatus+0x40>
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	d904      	bls.n	80009c4 <A7670xx_networkStatus+0x40>
		{
			read[count] = '\0';
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <A7670xx_networkStatus+0x6c>)
 80009be:	2100      	movs	r1, #0
 80009c0:	54d1      	strb	r1, [r2, r3]

			break;
 80009c2:	e009      	b.n	80009d8 <A7670xx_networkStatus+0x54>
		}

		count++;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	3301      	adds	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
	while(count <= strlen(read))
 80009ca:	7bfc      	ldrb	r4, [r7, #15]
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <A7670xx_networkStatus+0x6c>)
 80009ce:	f7ff fc11 	bl	80001f4 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	429c      	cmp	r4, r3
 80009d6:	d9e8      	bls.n	80009aa <A7670xx_networkStatus+0x26>
	}

	data = strstr(read, "+CGATT:");
 80009d8:	4906      	ldr	r1, [pc, #24]	; (80009f4 <A7670xx_networkStatus+0x70>)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <A7670xx_networkStatus+0x6c>)
 80009dc:	f003 fd40 	bl	8004460 <strstr>
 80009e0:	60b8      	str	r0, [r7, #8]

	return data;
 80009e2:	68bb      	ldr	r3, [r7, #8]

}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	080052f0 	.word	0x080052f0
 80009f0:	20000190 	.word	0x20000190
 80009f4:	08005218 	.word	0x08005218

080009f8 <A7670xx_getIPSIM>:


char* A7670xx_getIPSIM(UART_HandleTypeDef *huart)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	//This function gets SIM Card IP address
	static char buffer[30] = {'\0'}, str[30] = {'\0'};
	char *temp, *data;
	uint8_t count = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	74fb      	strb	r3, [r7, #19]

	HAL_UART_Transmit(huart, (uint8_t*)Ask_IP, strlen(Ask_IP), 20);
 8000a04:	2314      	movs	r3, #20
 8000a06:	220c      	movs	r2, #12
 8000a08:	4930      	ldr	r1, [pc, #192]	; (8000acc <A7670xx_getIPSIM+0xd4>)
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f002 faf3 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)buffer, sizeof(buffer), 50);
 8000a10:	2332      	movs	r3, #50	; 0x32
 8000a12:	221e      	movs	r2, #30
 8000a14:	492e      	ldr	r1, [pc, #184]	; (8000ad0 <A7670xx_getIPSIM+0xd8>)
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f002 fb78 	bl	800310c <HAL_UART_Receive>

	while(count <= strlen(buffer))
 8000a1c:	e00f      	b.n	8000a3e <A7670xx_getIPSIM+0x46>
	{
		if(buffer[count] == '\r' && count > 4)
 8000a1e:	7cfb      	ldrb	r3, [r7, #19]
 8000a20:	4a2b      	ldr	r2, [pc, #172]	; (8000ad0 <A7670xx_getIPSIM+0xd8>)
 8000a22:	5cd3      	ldrb	r3, [r2, r3]
 8000a24:	2b0d      	cmp	r3, #13
 8000a26:	d107      	bne.n	8000a38 <A7670xx_getIPSIM+0x40>
 8000a28:	7cfb      	ldrb	r3, [r7, #19]
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d904      	bls.n	8000a38 <A7670xx_getIPSIM+0x40>
		{
			buffer[count] = '\0';
 8000a2e:	7cfb      	ldrb	r3, [r7, #19]
 8000a30:	4a27      	ldr	r2, [pc, #156]	; (8000ad0 <A7670xx_getIPSIM+0xd8>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	54d1      	strb	r1, [r2, r3]

			break;
 8000a36:	e009      	b.n	8000a4c <A7670xx_getIPSIM+0x54>
		}

		count++;
 8000a38:	7cfb      	ldrb	r3, [r7, #19]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	74fb      	strb	r3, [r7, #19]
	while(count <= strlen(buffer))
 8000a3e:	7cfc      	ldrb	r4, [r7, #19]
 8000a40:	4823      	ldr	r0, [pc, #140]	; (8000ad0 <A7670xx_getIPSIM+0xd8>)
 8000a42:	f7ff fbd7 	bl	80001f4 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	429c      	cmp	r4, r3
 8000a4a:	d9e8      	bls.n	8000a1e <A7670xx_getIPSIM+0x26>
	}

	//get data

	temp = strchr(buffer, '+');
 8000a4c:	212b      	movs	r1, #43	; 0x2b
 8000a4e:	4820      	ldr	r0, [pc, #128]	; (8000ad0 <A7670xx_getIPSIM+0xd8>)
 8000a50:	f003 fc8a 	bl	8004368 <strchr>
 8000a54:	60f8      	str	r0, [r7, #12]

	if(strncmp(temp, "+CGPADDR", 8) == 0)
 8000a56:	2208      	movs	r2, #8
 8000a58:	491e      	ldr	r1, [pc, #120]	; (8000ad4 <A7670xx_getIPSIM+0xdc>)
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f003 fc91 	bl	8004382 <strncmp>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d128      	bne.n	8000ab8 <A7670xx_getIPSIM+0xc0>
	{
		temp = strtok(buffer, ",");
 8000a66:	491c      	ldr	r1, [pc, #112]	; (8000ad8 <A7670xx_getIPSIM+0xe0>)
 8000a68:	4819      	ldr	r0, [pc, #100]	; (8000ad0 <A7670xx_getIPSIM+0xd8>)
 8000a6a:	f003 fc9d 	bl	80043a8 <strtok>
 8000a6e:	60f8      	str	r0, [r7, #12]

		temp = strtok(NULL, ",");
 8000a70:	4919      	ldr	r1, [pc, #100]	; (8000ad8 <A7670xx_getIPSIM+0xe0>)
 8000a72:	2000      	movs	r0, #0
 8000a74:	f003 fc98 	bl	80043a8 <strtok>
 8000a78:	60f8      	str	r0, [r7, #12]

		//add double '"'
		strcat(str, "\"");
 8000a7a:	4818      	ldr	r0, [pc, #96]	; (8000adc <A7670xx_getIPSIM+0xe4>)
 8000a7c:	f7ff fbba 	bl	80001f4 <strlen>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <A7670xx_getIPSIM+0xe4>)
 8000a86:	4413      	add	r3, r2
 8000a88:	4915      	ldr	r1, [pc, #84]	; (8000ae0 <A7670xx_getIPSIM+0xe8>)
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	8013      	strh	r3, [r2, #0]
		strcat(str, temp);
 8000a92:	68f9      	ldr	r1, [r7, #12]
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <A7670xx_getIPSIM+0xe4>)
 8000a96:	f003 fc58 	bl	800434a <strcat>
		strcat(str, "\"");
 8000a9a:	4810      	ldr	r0, [pc, #64]	; (8000adc <A7670xx_getIPSIM+0xe4>)
 8000a9c:	f7ff fbaa 	bl	80001f4 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <A7670xx_getIPSIM+0xe4>)
 8000aa6:	4413      	add	r3, r2
 8000aa8:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <A7670xx_getIPSIM+0xe8>)
 8000aaa:	461a      	mov	r2, r3
 8000aac:	460b      	mov	r3, r1
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	8013      	strh	r3, [r2, #0]

		data = str;
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <A7670xx_getIPSIM+0xe4>)
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	e004      	b.n	8000ac2 <A7670xx_getIPSIM+0xca>

	}
	else
		data = strstr(buffer, "ERROR");
 8000ab8:	490a      	ldr	r1, [pc, #40]	; (8000ae4 <A7670xx_getIPSIM+0xec>)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <A7670xx_getIPSIM+0xd8>)
 8000abc:	f003 fcd0 	bl	8004460 <strstr>
 8000ac0:	6178      	str	r0, [r7, #20]

	return data;
 8000ac2:	697b      	ldr	r3, [r7, #20]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	371c      	adds	r7, #28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	080052fc 	.word	0x080052fc
 8000ad0:	200001a4 	.word	0x200001a4
 8000ad4:	08005220 	.word	0x08005220
 8000ad8:	08005204 	.word	0x08005204
 8000adc:	200001c4 	.word	0x200001c4
 8000ae0:	0800522c 	.word	0x0800522c
 8000ae4:	080051ec 	.word	0x080051ec

08000ae8 <A7670xx_networkStatusIT>:


void A7670xx_networkStatusIT(UART_HandleTypeDef *huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	//This function ask is LTE module is connected to the Mobile Network

	HAL_UART_Transmit(huart, (uint8_t*)Ask_CGATT, strlen(Ask_CGATT), 20);
 8000af0:	2314      	movs	r3, #20
 8000af2:	220b      	movs	r2, #11
 8000af4:	4903      	ldr	r1, [pc, #12]	; (8000b04 <A7670xx_networkStatusIT+0x1c>)
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f002 fa7d 	bl	8002ff6 <HAL_UART_Transmit>

}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	080052f0 	.word	0x080052f0

08000b08 <A7670xx_httpEnable>:

}


uint8_t A7670xx_httpEnable(UART_HandleTypeDef *huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0a0      	sub	sp, #128	; 0x80
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	//This function enables HTTP communication as client

	char data[100], rx_data[10];
	uint8_t count = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	do{
		HAL_UART_Transmit(huart, (uint8_t*)HTTP_Enable, strlen(HTTP_Enable), 20);
 8000b16:	2314      	movs	r3, #20
 8000b18:	220d      	movs	r2, #13
 8000b1a:	491a      	ldr	r1, [pc, #104]	; (8000b84 <A7670xx_httpEnable+0x7c>)
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f002 fa6a 	bl	8002ff6 <HAL_UART_Transmit>

		HAL_UART_Receive(huart, (uint8_t*)rx_data, sizeof(rx_data), 50);
 8000b22:	f107 010c 	add.w	r1, r7, #12
 8000b26:	2332      	movs	r3, #50	; 0x32
 8000b28:	220a      	movs	r2, #10
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f002 faee 	bl	800310c <HAL_UART_Receive>

		HAL_Delay(100);
 8000b30:	2064      	movs	r0, #100	; 0x64
 8000b32:	f001 fa11 	bl	8001f58 <HAL_Delay>

		count++;
 8000b36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}while(strncmp(rx_data, "ERROR", 5) == 0 && count < 3);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2205      	movs	r2, #5
 8000b46:	4910      	ldr	r1, [pc, #64]	; (8000b88 <A7670xx_httpEnable+0x80>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 fc1a 	bl	8004382 <strncmp>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d103      	bne.n	8000b5c <A7670xx_httpEnable+0x54>
 8000b54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d9dc      	bls.n	8000b16 <A7670xx_httpEnable+0xe>

	HAL_UART_Receive(huart, (uint8_t*)data, sizeof(data), 5000);
 8000b5c:	f107 0118 	add.w	r1, r7, #24
 8000b60:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b64:	2264      	movs	r2, #100	; 0x64
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f002 fad0 	bl	800310c <HAL_UART_Receive>

	if(count == 3)
 8000b6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d101      	bne.n	8000b78 <A7670xx_httpEnable+0x70>
		return 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <A7670xx_httpEnable+0x72>
	else
		return 0;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3780      	adds	r7, #128	; 0x80
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	0800533c 	.word	0x0800533c
 8000b88:	080051ec 	.word	0x080051ec

08000b8c <A7670xx_httpPOST>:


void A7670xx_httpPOST(UART_HandleTypeDef *huart, char *protocol, char *ip, char *port, char *url)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b0cb      	sub	sp, #300	; 0x12c
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8000b96:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8000b9a:	6020      	str	r0, [r4, #0]
 8000b9c:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8000ba0:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8000ba4:	6001      	str	r1, [r0, #0]
 8000ba6:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8000baa:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8000bae:	600a      	str	r2, [r1, #0]
 8000bb0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000bb4:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8000bb8:	6013      	str	r3, [r2, #0]
	//This function configures HTTP parameters as follows

	char post_method[20] = {'\0'}, command[260] = {'\0'};
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000bc0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000bd2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	3304      	adds	r3, #4
 8000bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f003 fba9 	bl	800433a <memset>

	//set up HTTP URL
	strcat(command, HTTP_Params);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fb01 	bl	80001f4 <strlen>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a5f      	ldr	r2, [pc, #380]	; (8000d7c <A7670xx_httpPOST+0x1f0>)
 8000bfe:	461c      	mov	r4, r3
 8000c00:	4613      	mov	r3, r2
 8000c02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c04:	6020      	str	r0, [r4, #0]
 8000c06:	6061      	str	r1, [r4, #4]
 8000c08:	60a2      	str	r2, [r4, #8]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	7323      	strb	r3, [r4, #12]
	strcat(command, "\"URL\",\"");
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff faee 	bl	80001f4 <strlen>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4413      	add	r3, r2
 8000c22:	4957      	ldr	r1, [pc, #348]	; (8000d80 <A7670xx_httpPOST+0x1f4>)
 8000c24:	461a      	mov	r2, r3
 8000c26:	460b      	mov	r3, r1
 8000c28:	cb03      	ldmia	r3!, {r0, r1}
 8000c2a:	6010      	str	r0, [r2, #0]
 8000c2c:	6051      	str	r1, [r2, #4]
	strcat(command, protocol);
 8000c2e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000c32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c36:	f107 0210 	add.w	r2, r7, #16
 8000c3a:	6819      	ldr	r1, [r3, #0]
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	f003 fb84 	bl	800434a <strcat>
	strcat(command, "://");
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fad4 	bl	80001f4 <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4413      	add	r3, r2
 8000c56:	4a4b      	ldr	r2, [pc, #300]	; (8000d84 <A7670xx_httpPOST+0x1f8>)
 8000c58:	6810      	ldr	r0, [r2, #0]
 8000c5a:	6018      	str	r0, [r3, #0]
	strcat(command, ip);
 8000c5c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000c60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c64:	f107 0210 	add.w	r2, r7, #16
 8000c68:	6819      	ldr	r1, [r3, #0]
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	f003 fb6d 	bl	800434a <strcat>
	strcat(command, ":");
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fabd 	bl	80001f4 <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4413      	add	r3, r2
 8000c84:	4940      	ldr	r1, [pc, #256]	; (8000d88 <A7670xx_httpPOST+0x1fc>)
 8000c86:	461a      	mov	r2, r3
 8000c88:	460b      	mov	r3, r1
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	8013      	strh	r3, [r2, #0]
	strcat(command, port);
 8000c8e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000c92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c96:	f107 0210 	add.w	r2, r7, #16
 8000c9a:	6819      	ldr	r1, [r3, #0]
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	f003 fb54 	bl	800434a <strcat>
	strcat(command, "/");
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff faa4 	bl	80001f4 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4935      	ldr	r1, [pc, #212]	; (8000d8c <A7670xx_httpPOST+0x200>)
 8000cb8:	461a      	mov	r2, r3
 8000cba:	460b      	mov	r3, r1
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	8013      	strh	r3, [r2, #0]
	strcat(command, url);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 fb3e 	bl	800434a <strcat>
	strcat(command, "\"\r\n");
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fa8e 	bl	80001f4 <strlen>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a2b      	ldr	r2, [pc, #172]	; (8000d90 <A7670xx_httpPOST+0x204>)
 8000ce4:	6810      	ldr	r0, [r2, #0]
 8000ce6:	6018      	str	r0, [r3, #0]

	//set up post command
	strcat(post_method, HTTP_PostMethod);
 8000ce8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fa81 	bl	80001f4 <strlen>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <A7670xx_httpPOST+0x208>)
 8000cfe:	461c      	mov	r4, r3
 8000d00:	4613      	mov	r3, r2
 8000d02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d04:	6020      	str	r0, [r4, #0]
 8000d06:	6061      	str	r1, [r4, #4]
 8000d08:	60a2      	str	r2, [r4, #8]
 8000d0a:	881a      	ldrh	r2, [r3, #0]
 8000d0c:	789b      	ldrb	r3, [r3, #2]
 8000d0e:	81a2      	strh	r2, [r4, #12]
 8000d10:	73a3      	strb	r3, [r4, #14]
	strcat(post_method, "1\r\n");
 8000d12:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fa6c 	bl	80001f4 <strlen>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000d24:	4413      	add	r3, r2
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <A7670xx_httpPOST+0x20c>)
 8000d28:	6810      	ldr	r0, [r2, #0]
 8000d2a:	6018      	str	r0, [r3, #0]

	//send command
	HAL_UART_Transmit(huart, (uint8_t*)command, strlen(command), 300);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fa5f 	bl	80001f4 <strlen>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f107 0110 	add.w	r1, r7, #16
 8000d3e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d42:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8000d46:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d4a:	6800      	ldr	r0, [r0, #0]
 8000d4c:	f002 f953 	bl	8002ff6 <HAL_UART_Transmit>

	//send HTTP method
	HAL_UART_Transmit(huart, (uint8_t*)post_method, strlen(post_method), 20);
 8000d50:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fa4d 	bl	80001f4 <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8000d62:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d66:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8000d6a:	2314      	movs	r3, #20
 8000d6c:	6800      	ldr	r0, [r0, #0]
 8000d6e:	f002 f942 	bl	8002ff6 <HAL_UART_Transmit>

}
 8000d72:	bf00      	nop
 8000d74:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd90      	pop	{r4, r7, pc}
 8000d7c:	0800534c 	.word	0x0800534c
 8000d80:	08005250 	.word	0x08005250
 8000d84:	08005258 	.word	0x08005258
 8000d88:	0800525c 	.word	0x0800525c
 8000d8c:	08005260 	.word	0x08005260
 8000d90:	08005230 	.word	0x08005230
 8000d94:	0800535c 	.word	0x0800535c
 8000d98:	08005264 	.word	0x08005264

08000d9c <A7670xx_gnssConfigure>:


void A7670xx_gnssConfigure(UART_HandleTypeDef *huart, char *time, char *port)
{
 8000d9c:	b5b0      	push	{r4, r5, r7, lr}
 8000d9e:	b098      	sub	sp, #96	; 0x60
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
	//This function configure GNNS to send data each x time trough UART or USB port

	char data[20], set_time[20], set_port[30], *gnss;

	strcpy(set_time, GNSS_SetINFO);
 8000da8:	4b40      	ldr	r3, [pc, #256]	; (8000eac <A7670xx_gnssConfigure+0x110>)
 8000daa:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000db0:	c407      	stmia	r4!, {r0, r1, r2}
 8000db2:	8023      	strh	r3, [r4, #0]

	strcpy(set_port, GNSS_Port);
 8000db4:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <A7670xx_gnssConfigure+0x114>)
 8000db6:	f107 0414 	add.w	r4, r7, #20
 8000dba:	461d      	mov	r5, r3
 8000dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc0:	682b      	ldr	r3, [r5, #0]
 8000dc2:	6023      	str	r3, [r4, #0]


	strcat(set_time, time);
 8000dc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 fabd 	bl	800434a <strcat>
	strcat(set_time, "\r\n");
 8000dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fa0d 	bl	80001f4 <strlen>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000de2:	4413      	add	r3, r2
 8000de4:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <A7670xx_gnssConfigure+0x118>)
 8000de6:	8811      	ldrh	r1, [r2, #0]
 8000de8:	7892      	ldrb	r2, [r2, #2]
 8000dea:	8019      	strh	r1, [r3, #0]
 8000dec:	709a      	strb	r2, [r3, #2]

	strcat(set_port, port);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 faa8 	bl	800434a <strcat>
	strcat(set_port, "\r\n");
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9f8 	bl	80001f4 <strlen>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a29      	ldr	r2, [pc, #164]	; (8000eb4 <A7670xx_gnssConfigure+0x118>)
 8000e10:	8811      	ldrh	r1, [r2, #0]
 8000e12:	7892      	ldrb	r2, [r2, #2]
 8000e14:	8019      	strh	r1, [r3, #0]
 8000e16:	709a      	strb	r2, [r3, #2]

	//Enable GNSS
	HAL_UART_Transmit(huart, (uint8_t*)GNSS_Enable, strlen(GNSS_Enable), 20);
 8000e18:	2314      	movs	r3, #20
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	4926      	ldr	r1, [pc, #152]	; (8000eb8 <A7670xx_gnssConfigure+0x11c>)
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f002 f8e9 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)data, sizeof(data), 5000);
 8000e24:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e28:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e2c:	2214      	movs	r2, #20
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f002 f96c 	bl	800310c <HAL_UART_Receive>

	//confirm that GNSS data is ready!
	do{
		HAL_Delay(5000); //wait 5 seconds
 8000e34:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e38:	f001 f88e 	bl	8001f58 <HAL_Delay>

		gnss = A7670xx_gnssGetData(huart);
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f000 f83f 	bl	8000ec0 <A7670xx_gnssGetData>
 8000e42:	65f8      	str	r0, [r7, #92]	; 0x5c

	}while(strncmp(gnss, "+CGNSSINFO: ,,,", 15) == 0);
 8000e44:	220f      	movs	r2, #15
 8000e46:	491d      	ldr	r1, [pc, #116]	; (8000ebc <A7670xx_gnssConfigure+0x120>)
 8000e48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e4a:	f003 fa9a 	bl	8004382 <strncmp>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0ef      	beq.n	8000e34 <A7670xx_gnssConfigure+0x98>

	//if GNSS data is ready!

	//set up GNSS data time
	HAL_UART_Transmit(huart, (uint8_t*)set_time, strlen(set_time), 20);
 8000e54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff f9cb 	bl	80001f4 <strlen>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000e66:	2314      	movs	r3, #20
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f002 f8c4 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)data, sizeof(data), 50);
 8000e6e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e72:	2332      	movs	r3, #50	; 0x32
 8000e74:	2214      	movs	r2, #20
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f002 f948 	bl	800310c <HAL_UART_Receive>

	//set up which port GNSS will send data
	HAL_UART_Transmit(huart, (uint8_t*)set_port, strlen(set_port), 20);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff f9b7 	bl	80001f4 <strlen>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	f107 0114 	add.w	r1, r7, #20
 8000e8e:	2314      	movs	r3, #20
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f002 f8b0 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)data, sizeof(data), 50);
 8000e96:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e9a:	2332      	movs	r3, #50	; 0x32
 8000e9c:	2214      	movs	r2, #20
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f002 f934 	bl	800310c <HAL_UART_Receive>

}
 8000ea4:	bf00      	nop
 8000ea6:	3760      	adds	r7, #96	; 0x60
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8000eac:	08005380 	.word	0x08005380
 8000eb0:	0800536c 	.word	0x0800536c
 8000eb4:	080051e8 	.word	0x080051e8
 8000eb8:	08005314 	.word	0x08005314
 8000ebc:	08005268 	.word	0x08005268

08000ec0 <A7670xx_gnssGetData>:


char* A7670xx_gnssGetData(UART_HandleTypeDef *huart)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	static char buffer[120];
	char *gnssdata;
	uint8_t count;

	//request GNSS data
	HAL_UART_Transmit(huart, (uint8_t*)GNSS_GetData, strlen(GNSS_GetData), 20);
 8000ec8:	2314      	movs	r3, #20
 8000eca:	220e      	movs	r2, #14
 8000ecc:	4915      	ldr	r1, [pc, #84]	; (8000f24 <A7670xx_gnssGetData+0x64>)
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f002 f891 	bl	8002ff6 <HAL_UART_Transmit>

	HAL_UART_Receive(huart, (uint8_t*)buffer, sizeof(buffer), 200);
 8000ed4:	23c8      	movs	r3, #200	; 0xc8
 8000ed6:	2278      	movs	r2, #120	; 0x78
 8000ed8:	4913      	ldr	r1, [pc, #76]	; (8000f28 <A7670xx_gnssGetData+0x68>)
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f002 f916 	bl	800310c <HAL_UART_Receive>

	while(count <= strlen(buffer))
 8000ee0:	e00f      	b.n	8000f02 <A7670xx_gnssGetData+0x42>
	{
		if(buffer[count] == '\r' && count > 4)
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <A7670xx_gnssGetData+0x68>)
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	2b0d      	cmp	r3, #13
 8000eea:	d107      	bne.n	8000efc <A7670xx_gnssGetData+0x3c>
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d904      	bls.n	8000efc <A7670xx_gnssGetData+0x3c>
		{
			buffer[count] = '\0';
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <A7670xx_gnssGetData+0x68>)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	54d1      	strb	r1, [r2, r3]

			break;
 8000efa:	e009      	b.n	8000f10 <A7670xx_gnssGetData+0x50>
		}

		count++;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	3301      	adds	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
	while(count <= strlen(buffer))
 8000f02:	7bfc      	ldrb	r4, [r7, #15]
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <A7670xx_gnssGetData+0x68>)
 8000f06:	f7ff f975 	bl	80001f4 <strlen>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	429c      	cmp	r4, r3
 8000f0e:	d9e8      	bls.n	8000ee2 <A7670xx_gnssGetData+0x22>
	}

	//clear data received
	gnssdata = strstr(buffer, "+CGNSSINFO");
 8000f10:	4906      	ldr	r1, [pc, #24]	; (8000f2c <A7670xx_gnssGetData+0x6c>)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <A7670xx_gnssGetData+0x68>)
 8000f14:	f003 faa4 	bl	8004460 <strstr>
 8000f18:	60b8      	str	r0, [r7, #8]

	return gnssdata;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}
 8000f24:	08005324 	.word	0x08005324
 8000f28:	200001e4 	.word	0x200001e4
 8000f2c:	08005278 	.word	0x08005278

08000f30 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8000f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f34:	b0c0      	sub	sp, #256	; 0x100
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8000f3c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8000f40:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000f44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f50:	f040 810c 	bne.w	800116c <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000f54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000f5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000f62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000f66:	4622      	mov	r2, r4
 8000f68:	462b      	mov	r3, r5
 8000f6a:	1891      	adds	r1, r2, r2
 8000f6c:	6639      	str	r1, [r7, #96]	; 0x60
 8000f6e:	415b      	adcs	r3, r3
 8000f70:	667b      	str	r3, [r7, #100]	; 0x64
 8000f72:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000f76:	4621      	mov	r1, r4
 8000f78:	eb12 0801 	adds.w	r8, r2, r1
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	eb43 0901 	adc.w	r9, r3, r1
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f96:	4690      	mov	r8, r2
 8000f98:	4699      	mov	r9, r3
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	eb18 0303 	adds.w	r3, r8, r3
 8000fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	eb49 0303 	adc.w	r3, r9, r3
 8000faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000fae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	469a      	mov	sl, r3
 8000fb6:	4693      	mov	fp, r2
 8000fb8:	eb1a 030a 	adds.w	r3, sl, sl
 8000fbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fbe:	eb4b 030b 	adc.w	r3, fp, fp
 8000fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000fcc:	f7ff f970 	bl	80002b0 <__aeabi_uldivmod>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4b64      	ldr	r3, [pc, #400]	; (8001168 <LL_USART_SetBaudRate+0x238>)
 8000fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	b29c      	uxth	r4, r3
 8000fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000fec:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000ff0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8000ff4:	4642      	mov	r2, r8
 8000ff6:	464b      	mov	r3, r9
 8000ff8:	1891      	adds	r1, r2, r2
 8000ffa:	6539      	str	r1, [r7, #80]	; 0x50
 8000ffc:	415b      	adcs	r3, r3
 8000ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8001000:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001004:	4641      	mov	r1, r8
 8001006:	1851      	adds	r1, r2, r1
 8001008:	64b9      	str	r1, [r7, #72]	; 0x48
 800100a:	4649      	mov	r1, r9
 800100c:	414b      	adcs	r3, r1
 800100e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800101c:	4659      	mov	r1, fp
 800101e:	00cb      	lsls	r3, r1, #3
 8001020:	4651      	mov	r1, sl
 8001022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001026:	4651      	mov	r1, sl
 8001028:	00ca      	lsls	r2, r1, #3
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	4603      	mov	r3, r0
 8001030:	4642      	mov	r2, r8
 8001032:	189b      	adds	r3, r3, r2
 8001034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001038:	464b      	mov	r3, r9
 800103a:	460a      	mov	r2, r1
 800103c:	eb42 0303 	adc.w	r3, r2, r3
 8001040:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001044:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001048:	2200      	movs	r2, #0
 800104a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800104e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001052:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001056:	460b      	mov	r3, r1
 8001058:	18db      	adds	r3, r3, r3
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
 800105c:	4613      	mov	r3, r2
 800105e:	eb42 0303 	adc.w	r3, r2, r3
 8001062:	647b      	str	r3, [r7, #68]	; 0x44
 8001064:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001068:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800106c:	f7ff f920 	bl	80002b0 <__aeabi_uldivmod>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4611      	mov	r1, r2
 8001076:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <LL_USART_SetBaudRate+0x238>)
 8001078:	fba3 2301 	umull	r2, r3, r3, r1
 800107c:	095b      	lsrs	r3, r3, #5
 800107e:	2264      	movs	r2, #100	; 0x64
 8001080:	fb02 f303 	mul.w	r3, r2, r3
 8001084:	1acb      	subs	r3, r1, r3
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <LL_USART_SetBaudRate+0x238>)
 800108e:	fba3 2302 	umull	r2, r3, r3, r2
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	b29b      	uxth	r3, r3
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	b29b      	uxth	r3, r3
 800109a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4423      	add	r3, r4
 80010a2:	b29c      	uxth	r4, r3
 80010a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80010ae:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80010b2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80010b6:	4642      	mov	r2, r8
 80010b8:	464b      	mov	r3, r9
 80010ba:	1891      	adds	r1, r2, r2
 80010bc:	63b9      	str	r1, [r7, #56]	; 0x38
 80010be:	415b      	adcs	r3, r3
 80010c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80010c6:	4641      	mov	r1, r8
 80010c8:	1851      	adds	r1, r2, r1
 80010ca:	6339      	str	r1, [r7, #48]	; 0x30
 80010cc:	4649      	mov	r1, r9
 80010ce:	414b      	adcs	r3, r1
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80010de:	4659      	mov	r1, fp
 80010e0:	00cb      	lsls	r3, r1, #3
 80010e2:	4651      	mov	r1, sl
 80010e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80010e8:	4651      	mov	r1, sl
 80010ea:	00ca      	lsls	r2, r1, #3
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	4603      	mov	r3, r0
 80010f2:	4642      	mov	r2, r8
 80010f4:	189b      	adds	r3, r3, r2
 80010f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80010fa:	464b      	mov	r3, r9
 80010fc:	460a      	mov	r2, r1
 80010fe:	eb42 0303 	adc.w	r3, r2, r3
 8001102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001106:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800110a:	2200      	movs	r2, #0
 800110c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001110:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001114:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8001118:	460b      	mov	r3, r1
 800111a:	18db      	adds	r3, r3, r3
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
 800111e:	4613      	mov	r3, r2
 8001120:	eb42 0303 	adc.w	r3, r2, r3
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800112a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800112e:	f7ff f8bf 	bl	80002b0 <__aeabi_uldivmod>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <LL_USART_SetBaudRate+0x238>)
 8001138:	fba3 1302 	umull	r1, r3, r3, r2
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	2164      	movs	r1, #100	; 0x64
 8001140:	fb01 f303 	mul.w	r3, r1, r3
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	3332      	adds	r3, #50	; 0x32
 800114a:	4a07      	ldr	r2, [pc, #28]	; (8001168 <LL_USART_SetBaudRate+0x238>)
 800114c:	fba2 2303 	umull	r2, r3, r2, r3
 8001150:	095b      	lsrs	r3, r3, #5
 8001152:	b29b      	uxth	r3, r3
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	b29b      	uxth	r3, r3
 800115a:	4423      	add	r3, r4
 800115c:	b29b      	uxth	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001164:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001166:	e108      	b.n	800137a <LL_USART_SetBaudRate+0x44a>
 8001168:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800116c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001170:	2200      	movs	r2, #0
 8001172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001176:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800117a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800117e:	4642      	mov	r2, r8
 8001180:	464b      	mov	r3, r9
 8001182:	1891      	adds	r1, r2, r2
 8001184:	6239      	str	r1, [r7, #32]
 8001186:	415b      	adcs	r3, r3
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800118e:	4641      	mov	r1, r8
 8001190:	1854      	adds	r4, r2, r1
 8001192:	4649      	mov	r1, r9
 8001194:	eb43 0501 	adc.w	r5, r3, r1
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	00eb      	lsls	r3, r5, #3
 80011a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011a6:	00e2      	lsls	r2, r4, #3
 80011a8:	4614      	mov	r4, r2
 80011aa:	461d      	mov	r5, r3
 80011ac:	4643      	mov	r3, r8
 80011ae:	18e3      	adds	r3, r4, r3
 80011b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80011b4:	464b      	mov	r3, r9
 80011b6:	eb45 0303 	adc.w	r3, r5, r3
 80011ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80011be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80011c2:	2200      	movs	r2, #0
 80011c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80011c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80011d8:	4629      	mov	r1, r5
 80011da:	008b      	lsls	r3, r1, #2
 80011dc:	4621      	mov	r1, r4
 80011de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011e2:	4621      	mov	r1, r4
 80011e4:	008a      	lsls	r2, r1, #2
 80011e6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80011ea:	f7ff f861 	bl	80002b0 <__aeabi_uldivmod>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4b65      	ldr	r3, [pc, #404]	; (8001388 <LL_USART_SetBaudRate+0x458>)
 80011f4:	fba3 2302 	umull	r2, r3, r3, r2
 80011f8:	095b      	lsrs	r3, r3, #5
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	b29c      	uxth	r4, r3
 8001200:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001204:	2200      	movs	r2, #0
 8001206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800120a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800120e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001212:	4642      	mov	r2, r8
 8001214:	464b      	mov	r3, r9
 8001216:	1891      	adds	r1, r2, r2
 8001218:	61b9      	str	r1, [r7, #24]
 800121a:	415b      	adcs	r3, r3
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001222:	4641      	mov	r1, r8
 8001224:	1851      	adds	r1, r2, r1
 8001226:	6139      	str	r1, [r7, #16]
 8001228:	4649      	mov	r1, r9
 800122a:	414b      	adcs	r3, r1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800123a:	4659      	mov	r1, fp
 800123c:	00cb      	lsls	r3, r1, #3
 800123e:	4651      	mov	r1, sl
 8001240:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001244:	4651      	mov	r1, sl
 8001246:	00ca      	lsls	r2, r1, #3
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	4603      	mov	r3, r0
 800124e:	4642      	mov	r2, r8
 8001250:	189b      	adds	r3, r3, r2
 8001252:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001256:	464b      	mov	r3, r9
 8001258:	460a      	mov	r2, r1
 800125a:	eb42 0303 	adc.w	r3, r2, r3
 800125e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001262:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001266:	2200      	movs	r2, #0
 8001268:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800126c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800127c:	4649      	mov	r1, r9
 800127e:	008b      	lsls	r3, r1, #2
 8001280:	4641      	mov	r1, r8
 8001282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001286:	4641      	mov	r1, r8
 8001288:	008a      	lsls	r2, r1, #2
 800128a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800128e:	f7ff f80f 	bl	80002b0 <__aeabi_uldivmod>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4611      	mov	r1, r2
 8001298:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <LL_USART_SetBaudRate+0x458>)
 800129a:	fba3 2301 	umull	r2, r3, r3, r1
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2264      	movs	r2, #100	; 0x64
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	1acb      	subs	r3, r1, r3
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	3332      	adds	r3, #50	; 0x32
 80012ac:	4a36      	ldr	r2, [pc, #216]	; (8001388 <LL_USART_SetBaudRate+0x458>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4423      	add	r3, r4
 80012be:	b29c      	uxth	r4, r3
 80012c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012c4:	2200      	movs	r2, #0
 80012c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80012c8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80012ca:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80012ce:	4642      	mov	r2, r8
 80012d0:	464b      	mov	r3, r9
 80012d2:	1891      	adds	r1, r2, r2
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	415b      	adcs	r3, r3
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012de:	4641      	mov	r1, r8
 80012e0:	1851      	adds	r1, r2, r1
 80012e2:	6039      	str	r1, [r7, #0]
 80012e4:	4649      	mov	r1, r9
 80012e6:	414b      	adcs	r3, r1
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80012f6:	4659      	mov	r1, fp
 80012f8:	00cb      	lsls	r3, r1, #3
 80012fa:	4651      	mov	r1, sl
 80012fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001300:	4651      	mov	r1, sl
 8001302:	00ca      	lsls	r2, r1, #3
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	4603      	mov	r3, r0
 800130a:	4642      	mov	r2, r8
 800130c:	189b      	adds	r3, r3, r2
 800130e:	673b      	str	r3, [r7, #112]	; 0x70
 8001310:	464b      	mov	r3, r9
 8001312:	460a      	mov	r2, r1
 8001314:	eb42 0303 	adc.w	r3, r2, r3
 8001318:	677b      	str	r3, [r7, #116]	; 0x74
 800131a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800131e:	2200      	movs	r2, #0
 8001320:	66bb      	str	r3, [r7, #104]	; 0x68
 8001322:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8001330:	4649      	mov	r1, r9
 8001332:	008b      	lsls	r3, r1, #2
 8001334:	4641      	mov	r1, r8
 8001336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800133a:	4641      	mov	r1, r8
 800133c:	008a      	lsls	r2, r1, #2
 800133e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001342:	f7fe ffb5 	bl	80002b0 <__aeabi_uldivmod>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <LL_USART_SetBaudRate+0x458>)
 800134c:	fba3 1302 	umull	r1, r3, r3, r2
 8001350:	095b      	lsrs	r3, r3, #5
 8001352:	2164      	movs	r1, #100	; 0x64
 8001354:	fb01 f303 	mul.w	r3, r1, r3
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	3332      	adds	r3, #50	; 0x32
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <LL_USART_SetBaudRate+0x458>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	b29b      	uxth	r3, r3
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	b29b      	uxth	r3, r3
 800136e:	4423      	add	r3, r4
 8001370:	b29b      	uxth	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001378:	609a      	str	r2, [r3, #8]
}
 800137a:	bf00      	nop
 800137c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001380:	46bd      	mov	sp, r7
 8001382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001386:	bf00      	nop
 8001388:	51eb851f 	.word	0x51eb851f

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001392:	f000 fd6f 	bl	8001e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001396:	f000 fa41 	bl	800181c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139a:	f000 fac7 	bl	800192c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800139e:	f000 fa9b 	bl	80018d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*Begins LTE Module initialization*/
  HAL_Delay(30000); //wait 30 seconds
 80013a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80013a6:	f000 fdd7 	bl	8001f58 <HAL_Delay>

  A7670xx_setBaudRate(&huart1, baudrate);
 80013aa:	498b      	ldr	r1, [pc, #556]	; (80015d8 <main+0x24c>)
 80013ac:	488b      	ldr	r0, [pc, #556]	; (80015dc <main+0x250>)
 80013ae:	f7ff f8fd 	bl	80005ac <A7670xx_setBaudRate>

  LL_USART_SetBaudRate(USART1, 25000000,LL_USART_OVERSAMPLING_16 , 115200);
 80013b2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80013b6:	2200      	movs	r2, #0
 80013b8:	4989      	ldr	r1, [pc, #548]	; (80015e0 <main+0x254>)
 80013ba:	488a      	ldr	r0, [pc, #552]	; (80015e4 <main+0x258>)
 80013bc:	f7ff fdb8 	bl	8000f30 <LL_USART_SetBaudRate>

  HAL_Delay(1000);
 80013c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c4:	f000 fdc8 	bl	8001f58 <HAL_Delay>

  A7670xx_disableEcho(&huart1);
 80013c8:	4884      	ldr	r0, [pc, #528]	; (80015dc <main+0x250>)
 80013ca:	f7ff f92d 	bl	8000628 <A7670xx_disableEcho>

  rx_buffer = A7670xx_thereisSIMCard(&huart1);
 80013ce:	4883      	ldr	r0, [pc, #524]	; (80015dc <main+0x250>)
 80013d0:	f7ff f942 	bl	8000658 <A7670xx_thereisSIMCard>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a84      	ldr	r2, [pc, #528]	; (80015e8 <main+0x25c>)
 80013d8:	6013      	str	r3, [r2, #0]

  if(strncmp(rx_buffer, "ERROR", 5) == 0)
 80013da:	4b83      	ldr	r3, [pc, #524]	; (80015e8 <main+0x25c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2205      	movs	r2, #5
 80013e0:	4982      	ldr	r1, [pc, #520]	; (80015ec <main+0x260>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 ffcd 	bl	8004382 <strncmp>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <main+0x6a>
	  error = 1;
 80013ee:	4b80      	ldr	r3, [pc, #512]	; (80015f0 <main+0x264>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	e005      	b.n	8001402 <main+0x76>
  else
	  strcpy(mobile_cimi, rx_buffer);
 80013f6:	4b7c      	ldr	r3, [pc, #496]	; (80015e8 <main+0x25c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	487d      	ldr	r0, [pc, #500]	; (80015f4 <main+0x268>)
 80013fe:	f003 f8b8 	bl	8004572 <strcpy>

  rx_buffer = A7670xx_getMobileOperator(&huart1);
 8001402:	4876      	ldr	r0, [pc, #472]	; (80015dc <main+0x250>)
 8001404:	f7ff f988 	bl	8000718 <A7670xx_getMobileOperator>
 8001408:	4603      	mov	r3, r0
 800140a:	4a77      	ldr	r2, [pc, #476]	; (80015e8 <main+0x25c>)
 800140c:	6013      	str	r3, [r2, #0]

  if(strncmp(rx_buffer, "ERROR", 5) == 0)
 800140e:	4b76      	ldr	r3, [pc, #472]	; (80015e8 <main+0x25c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2205      	movs	r2, #5
 8001414:	4975      	ldr	r1, [pc, #468]	; (80015ec <main+0x260>)
 8001416:	4618      	mov	r0, r3
 8001418:	f002 ffb3 	bl	8004382 <strncmp>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <main+0x9e>
	  error = 1;
 8001422:	4b73      	ldr	r3, [pc, #460]	; (80015f0 <main+0x264>)
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	e005      	b.n	8001436 <main+0xaa>
  else
	  strcpy(mobile_operator, rx_buffer);
 800142a:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <main+0x25c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4619      	mov	r1, r3
 8001430:	4871      	ldr	r0, [pc, #452]	; (80015f8 <main+0x26c>)
 8001432:	f003 f89e 	bl	8004572 <strcpy>

  rx_buffer = A7670xx_getICCID(&huart1);
 8001436:	4869      	ldr	r0, [pc, #420]	; (80015dc <main+0x250>)
 8001438:	f7ff f9e0 	bl	80007fc <A7670xx_getICCID>
 800143c:	4603      	mov	r3, r0
 800143e:	4a6a      	ldr	r2, [pc, #424]	; (80015e8 <main+0x25c>)
 8001440:	6013      	str	r3, [r2, #0]

  if(strncmp(rx_buffer, "ERROR", 5) == 0)
 8001442:	4b69      	ldr	r3, [pc, #420]	; (80015e8 <main+0x25c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2205      	movs	r2, #5
 8001448:	4968      	ldr	r1, [pc, #416]	; (80015ec <main+0x260>)
 800144a:	4618      	mov	r0, r3
 800144c:	f002 ff99 	bl	8004382 <strncmp>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d103      	bne.n	800145e <main+0xd2>
	  error = 1;
 8001456:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <main+0x264>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	e005      	b.n	800146a <main+0xde>
  else
	  strcpy(mobile_iccid, rx_buffer);
 800145e:	4b62      	ldr	r3, [pc, #392]	; (80015e8 <main+0x25c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	4865      	ldr	r0, [pc, #404]	; (80015fc <main+0x270>)
 8001466:	f003 f884 	bl	8004572 <strcpy>

  rx_buffer = A7670xx_getMobileNumber(&huart1);
 800146a:	485c      	ldr	r0, [pc, #368]	; (80015dc <main+0x250>)
 800146c:	f7ff fa2c 	bl	80008c8 <A7670xx_getMobileNumber>
 8001470:	4603      	mov	r3, r0
 8001472:	4a5d      	ldr	r2, [pc, #372]	; (80015e8 <main+0x25c>)
 8001474:	6013      	str	r3, [r2, #0]

  if(strncmp(rx_buffer, "ERROR", 5) == 0)
 8001476:	4b5c      	ldr	r3, [pc, #368]	; (80015e8 <main+0x25c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2205      	movs	r2, #5
 800147c:	495b      	ldr	r1, [pc, #364]	; (80015ec <main+0x260>)
 800147e:	4618      	mov	r0, r3
 8001480:	f002 ff7f 	bl	8004382 <strncmp>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d103      	bne.n	8001492 <main+0x106>
	  error = 1;
 800148a:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <main+0x264>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e005      	b.n	800149e <main+0x112>
  else
	  strcpy(mobile_number, rx_buffer);
 8001492:	4b55      	ldr	r3, [pc, #340]	; (80015e8 <main+0x25c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	4859      	ldr	r0, [pc, #356]	; (8001600 <main+0x274>)
 800149a:	f003 f86a 	bl	8004572 <strcpy>

  rx_buffer = A7670xx_getIPSIM(&huart1);
 800149e:	484f      	ldr	r0, [pc, #316]	; (80015dc <main+0x250>)
 80014a0:	f7ff faaa 	bl	80009f8 <A7670xx_getIPSIM>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <main+0x25c>)
 80014a8:	6013      	str	r3, [r2, #0]

  if(strncmp(rx_buffer, "ERROR", 5) == 0)
 80014aa:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <main+0x25c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2205      	movs	r2, #5
 80014b0:	494e      	ldr	r1, [pc, #312]	; (80015ec <main+0x260>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 ff65 	bl	8004382 <strncmp>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d103      	bne.n	80014c6 <main+0x13a>
	  error = 1;
 80014be:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <main+0x264>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	e005      	b.n	80014d2 <main+0x146>
  else
	  strcpy(mobile_ip, rx_buffer);
 80014c6:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <main+0x25c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	484d      	ldr	r0, [pc, #308]	; (8001604 <main+0x278>)
 80014ce:	f003 f850 	bl	8004572 <strcpy>

  rx_buffer = A7670xx_networkStatus(&huart1);
 80014d2:	4842      	ldr	r0, [pc, #264]	; (80015dc <main+0x250>)
 80014d4:	f7ff fa56 	bl	8000984 <A7670xx_networkStatus>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a43      	ldr	r2, [pc, #268]	; (80015e8 <main+0x25c>)
 80014dc:	6013      	str	r3, [r2, #0]

   if(strncmp(rx_buffer, "+CGATT: 0", 9) == 0)
 80014de:	4b42      	ldr	r3, [pc, #264]	; (80015e8 <main+0x25c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2209      	movs	r2, #9
 80014e4:	4948      	ldr	r1, [pc, #288]	; (8001608 <main+0x27c>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 ff4b 	bl	8004382 <strncmp>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <main+0x16c>
 	  error = 1;
 80014f2:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <main+0x264>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]

  if(error == 0) //if there weren't error, enable HTTP
 80014f8:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <main+0x264>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <main+0x182>
	  error = A7670xx_httpEnable(&huart1);
 8001500:	4836      	ldr	r0, [pc, #216]	; (80015dc <main+0x250>)
 8001502:	f7ff fb01 	bl	8000b08 <A7670xx_httpEnable>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <main+0x264>)
 800150c:	701a      	strb	r2, [r3, #0]

  //enable and configure GNSS
  A7670xx_gnssConfigure(&huart1, "30", "1");
 800150e:	4a3f      	ldr	r2, [pc, #252]	; (800160c <main+0x280>)
 8001510:	493f      	ldr	r1, [pc, #252]	; (8001610 <main+0x284>)
 8001512:	4832      	ldr	r0, [pc, #200]	; (80015dc <main+0x250>)
 8001514:	f7ff fc42 	bl	8000d9c <A7670xx_gnssConfigure>

  //enable UART ISR
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_data, 1);
 8001518:	2201      	movs	r2, #1
 800151a:	493e      	ldr	r1, [pc, #248]	; (8001614 <main+0x288>)
 800151c:	482f      	ldr	r0, [pc, #188]	; (80015dc <main+0x250>)
 800151e:	f001 fe8c 	bl	800323a <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //While loop routine

	  if(usart_itflag)
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <main+0x28c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0fb      	beq.n	8001522 <main+0x196>
	  {
		  rx_buffer = strstr(rx_isrbuffer, "+C"); //get only clear data
 800152a:	493c      	ldr	r1, [pc, #240]	; (800161c <main+0x290>)
 800152c:	483c      	ldr	r0, [pc, #240]	; (8001620 <main+0x294>)
 800152e:	f002 ff97 	bl	8004460 <strstr>
 8001532:	4603      	mov	r3, r0
 8001534:	4a2c      	ldr	r2, [pc, #176]	; (80015e8 <main+0x25c>)
 8001536:	6013      	str	r3, [r2, #0]

		  strcpy(rx_cleardata, rx_buffer);
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <main+0x25c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	4839      	ldr	r0, [pc, #228]	; (8001624 <main+0x298>)
 8001540:	f003 f817 	bl	8004572 <strcpy>

		  memset(rx_isrbuffer, '\0', strlen(rx_isrbuffer)); //clear rx_isrbuffer
 8001544:	4836      	ldr	r0, [pc, #216]	; (8001620 <main+0x294>)
 8001546:	f7fe fe55 	bl	80001f4 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	2100      	movs	r1, #0
 8001550:	4833      	ldr	r0, [pc, #204]	; (8001620 <main+0x294>)
 8001552:	f002 fef2 	bl	800433a <memset>

		  usart_itflag = 0; //clear USART flag
 8001556:	4b30      	ldr	r3, [pc, #192]	; (8001618 <main+0x28c>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]

		  if(strncmp(rx_cleardata, "+CGNSSINFO", 10) == 0) //process a GNSS data and send it by HTTP/HTTPS
 800155c:	220a      	movs	r2, #10
 800155e:	4932      	ldr	r1, [pc, #200]	; (8001628 <main+0x29c>)
 8001560:	4830      	ldr	r0, [pc, #192]	; (8001624 <main+0x298>)
 8001562:	f002 ff0e 	bl	8004382 <strncmp>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1da      	bne.n	8001522 <main+0x196>
		  {

			  A7670xx_networkStatusIT(&huart1);
 800156c:	481b      	ldr	r0, [pc, #108]	; (80015dc <main+0x250>)
 800156e:	f7ff fabb 	bl	8000ae8 <A7670xx_networkStatusIT>

			  while(usart_itflag == 0); //wait  until read data
 8001572:	bf00      	nop
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <main+0x28c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0fb      	beq.n	8001574 <main+0x1e8>

			  //read buffer
			  rx_buffer = strstr(rx_isrbuffer, "+C");
 800157c:	4927      	ldr	r1, [pc, #156]	; (800161c <main+0x290>)
 800157e:	4828      	ldr	r0, [pc, #160]	; (8001620 <main+0x294>)
 8001580:	f002 ff6e 	bl	8004460 <strstr>
 8001584:	4603      	mov	r3, r0
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <main+0x25c>)
 8001588:	6013      	str	r3, [r2, #0]

			  strcpy(rx_networkstatus, rx_buffer);
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <main+0x25c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4619      	mov	r1, r3
 8001590:	4826      	ldr	r0, [pc, #152]	; (800162c <main+0x2a0>)
 8001592:	f002 ffee 	bl	8004572 <strcpy>

			  memset(rx_isrbuffer, '\0', strlen(rx_isrbuffer));
 8001596:	4822      	ldr	r0, [pc, #136]	; (8001620 <main+0x294>)
 8001598:	f7fe fe2c 	bl	80001f4 <strlen>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	2100      	movs	r1, #0
 80015a2:	481f      	ldr	r0, [pc, #124]	; (8001620 <main+0x294>)
 80015a4:	f002 fec9 	bl	800433a <memset>

			  usart_itflag = 0; //clear USART flag
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <main+0x28c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]

			  if(strcmp(rx_networkstatus, "+CGATT: 1") == 0) //if LET is connected, send data through HTTP
 80015ae:	4920      	ldr	r1, [pc, #128]	; (8001630 <main+0x2a4>)
 80015b0:	481e      	ldr	r0, [pc, #120]	; (800162c <main+0x2a0>)
 80015b2:	f7fe fe15 	bl	80001e0 <strcmp>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1b2      	bne.n	8001522 <main+0x196>
			  {
				  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80015bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c0:	481c      	ldr	r0, [pc, #112]	; (8001634 <main+0x2a8>)
 80015c2:	f001 f82e 	bl	8002622 <HAL_GPIO_TogglePin>

				  //split string received by ',' character
				  ptrtoken = strtok(rx_cleardata, ",");
 80015c6:	491c      	ldr	r1, [pc, #112]	; (8001638 <main+0x2ac>)
 80015c8:	4816      	ldr	r0, [pc, #88]	; (8001624 <main+0x298>)
 80015ca:	f002 feed 	bl	80043a8 <strtok>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a1a      	ldr	r2, [pc, #104]	; (800163c <main+0x2b0>)
 80015d2:	6013      	str	r3, [r2, #0]

				  while((ptrtoken != NULL) && (count > 1))
 80015d4:	e04d      	b.n	8001672 <main+0x2e6>
 80015d6:	bf00      	nop
 80015d8:	20000004 	.word	0x20000004
 80015dc:	2000025c 	.word	0x2000025c
 80015e0:	017d7840 	.word	0x017d7840
 80015e4:	40011000 	.word	0x40011000
 80015e8:	200002a4 	.word	0x200002a4
 80015ec:	08005284 	.word	0x08005284
 80015f0:	200003e2 	.word	0x200003e2
 80015f4:	200003f8 	.word	0x200003f8
 80015f8:	200003e4 	.word	0x200003e4
 80015fc:	20000408 	.word	0x20000408
 8001600:	20000420 	.word	0x20000420
 8001604:	20000430 	.word	0x20000430
 8001608:	0800528c 	.word	0x0800528c
 800160c:	08005298 	.word	0x08005298
 8001610:	0800529c 	.word	0x0800529c
 8001614:	200002a8 	.word	0x200002a8
 8001618:	200003e0 	.word	0x200003e0
 800161c:	080052a0 	.word	0x080052a0
 8001620:	200002ac 	.word	0x200002ac
 8001624:	20000324 	.word	0x20000324
 8001628:	080052a4 	.word	0x080052a4
 800162c:	2000039c 	.word	0x2000039c
 8001630:	080052b0 	.word	0x080052b0
 8001634:	40020800 	.word	0x40020800
 8001638:	080052bc 	.word	0x080052bc
 800163c:	200003dc 	.word	0x200003dc
				  {
					  count--;
 8001640:	4b5a      	ldr	r3, [pc, #360]	; (80017ac <main+0x420>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	3b01      	subs	r3, #1
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b58      	ldr	r3, [pc, #352]	; (80017ac <main+0x420>)
 800164a:	701a      	strb	r2, [r3, #0]

					  if(count <= 7)
 800164c:	4b57      	ldr	r3, [pc, #348]	; (80017ac <main+0x420>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b07      	cmp	r3, #7
 8001652:	d807      	bhi.n	8001664 <main+0x2d8>
						  gnss_data[count] = ptrtoken;
 8001654:	4b55      	ldr	r3, [pc, #340]	; (80017ac <main+0x420>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	4b55      	ldr	r3, [pc, #340]	; (80017b0 <main+0x424>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a55      	ldr	r2, [pc, #340]	; (80017b4 <main+0x428>)
 8001660:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

					  ptrtoken = strtok(NULL, ",");
 8001664:	4954      	ldr	r1, [pc, #336]	; (80017b8 <main+0x42c>)
 8001666:	2000      	movs	r0, #0
 8001668:	f002 fe9e 	bl	80043a8 <strtok>
 800166c:	4603      	mov	r3, r0
 800166e:	4a50      	ldr	r2, [pc, #320]	; (80017b0 <main+0x424>)
 8001670:	6013      	str	r3, [r2, #0]
				  while((ptrtoken != NULL) && (count > 1))
 8001672:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <main+0x424>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <main+0x2f6>
 800167a:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <main+0x420>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d8de      	bhi.n	8001640 <main+0x2b4>
				  }

				  memset(rx_cleardata, '\0', strlen(rx_cleardata)); //clear data array
 8001682:	484e      	ldr	r0, [pc, #312]	; (80017bc <main+0x430>)
 8001684:	f7fe fdb6 	bl	80001f4 <strlen>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	2100      	movs	r1, #0
 800168e:	484b      	ldr	r0, [pc, #300]	; (80017bc <main+0x430>)
 8001690:	f002 fe53 	bl	800433a <memset>
				  memset(rx_networkstatus, '\0', strlen(rx_networkstatus)); //clear network status array
 8001694:	484a      	ldr	r0, [pc, #296]	; (80017c0 <main+0x434>)
 8001696:	f7fe fdad 	bl	80001f4 <strlen>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	4847      	ldr	r0, [pc, #284]	; (80017c0 <main+0x434>)
 80016a2:	f002 fe4a 	bl	800433a <memset>

				  //built url with data
				  strcat(url, url_num);
 80016a6:	4947      	ldr	r1, [pc, #284]	; (80017c4 <main+0x438>)
 80016a8:	4847      	ldr	r0, [pc, #284]	; (80017c8 <main+0x43c>)
 80016aa:	f002 fe4e 	bl	800434a <strcat>
				  strcat(url, mobile_number);
 80016ae:	4947      	ldr	r1, [pc, #284]	; (80017cc <main+0x440>)
 80016b0:	4845      	ldr	r0, [pc, #276]	; (80017c8 <main+0x43c>)
 80016b2:	f002 fe4a 	bl	800434a <strcat>
				  strcat(url, url_iccid);
 80016b6:	4946      	ldr	r1, [pc, #280]	; (80017d0 <main+0x444>)
 80016b8:	4843      	ldr	r0, [pc, #268]	; (80017c8 <main+0x43c>)
 80016ba:	f002 fe46 	bl	800434a <strcat>
				  strcat(url, mobile_iccid);
 80016be:	4945      	ldr	r1, [pc, #276]	; (80017d4 <main+0x448>)
 80016c0:	4841      	ldr	r0, [pc, #260]	; (80017c8 <main+0x43c>)
 80016c2:	f002 fe42 	bl	800434a <strcat>
				  strcat(url, url_cimi);
 80016c6:	4944      	ldr	r1, [pc, #272]	; (80017d8 <main+0x44c>)
 80016c8:	483f      	ldr	r0, [pc, #252]	; (80017c8 <main+0x43c>)
 80016ca:	f002 fe3e 	bl	800434a <strcat>
				  strcat(url, mobile_cimi);
 80016ce:	4943      	ldr	r1, [pc, #268]	; (80017dc <main+0x450>)
 80016d0:	483d      	ldr	r0, [pc, #244]	; (80017c8 <main+0x43c>)
 80016d2:	f002 fe3a 	bl	800434a <strcat>
				  strcat(url, url_operator);
 80016d6:	4942      	ldr	r1, [pc, #264]	; (80017e0 <main+0x454>)
 80016d8:	483b      	ldr	r0, [pc, #236]	; (80017c8 <main+0x43c>)
 80016da:	f002 fe36 	bl	800434a <strcat>
				  strcat(url, mobile_operator);
 80016de:	4941      	ldr	r1, [pc, #260]	; (80017e4 <main+0x458>)
 80016e0:	4839      	ldr	r0, [pc, #228]	; (80017c8 <main+0x43c>)
 80016e2:	f002 fe32 	bl	800434a <strcat>
				  strcat(url, url_ipsim);
 80016e6:	4940      	ldr	r1, [pc, #256]	; (80017e8 <main+0x45c>)
 80016e8:	4837      	ldr	r0, [pc, #220]	; (80017c8 <main+0x43c>)
 80016ea:	f002 fe2e 	bl	800434a <strcat>
				  strcat(url, mobile_ip);
 80016ee:	493f      	ldr	r1, [pc, #252]	; (80017ec <main+0x460>)
 80016f0:	4835      	ldr	r0, [pc, #212]	; (80017c8 <main+0x43c>)
 80016f2:	f002 fe2a 	bl	800434a <strcat>
				  strcat(url, url_lat);
 80016f6:	493e      	ldr	r1, [pc, #248]	; (80017f0 <main+0x464>)
 80016f8:	4833      	ldr	r0, [pc, #204]	; (80017c8 <main+0x43c>)
 80016fa:	f002 fe26 	bl	800434a <strcat>
				  strcat(url, gnss_data[7]);
 80016fe:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <main+0x428>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	4619      	mov	r1, r3
 8001704:	4830      	ldr	r0, [pc, #192]	; (80017c8 <main+0x43c>)
 8001706:	f002 fe20 	bl	800434a <strcat>
				  strcat(url, url_latp);
 800170a:	493a      	ldr	r1, [pc, #232]	; (80017f4 <main+0x468>)
 800170c:	482e      	ldr	r0, [pc, #184]	; (80017c8 <main+0x43c>)
 800170e:	f002 fe1c 	bl	800434a <strcat>
				  strcat(url, gnss_data[6]);
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <main+0x428>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	4619      	mov	r1, r3
 8001718:	482b      	ldr	r0, [pc, #172]	; (80017c8 <main+0x43c>)
 800171a:	f002 fe16 	bl	800434a <strcat>
				  strcat(url, url_lon);
 800171e:	4936      	ldr	r1, [pc, #216]	; (80017f8 <main+0x46c>)
 8001720:	4829      	ldr	r0, [pc, #164]	; (80017c8 <main+0x43c>)
 8001722:	f002 fe12 	bl	800434a <strcat>
				  strcat(url, gnss_data[5]);
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <main+0x428>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4619      	mov	r1, r3
 800172c:	4826      	ldr	r0, [pc, #152]	; (80017c8 <main+0x43c>)
 800172e:	f002 fe0c 	bl	800434a <strcat>
				  strcat(url, url_lonp);
 8001732:	4932      	ldr	r1, [pc, #200]	; (80017fc <main+0x470>)
 8001734:	4824      	ldr	r0, [pc, #144]	; (80017c8 <main+0x43c>)
 8001736:	f002 fe08 	bl	800434a <strcat>
				  strcat(url, gnss_data[4]);
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <main+0x428>)
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	4619      	mov	r1, r3
 8001740:	4821      	ldr	r0, [pc, #132]	; (80017c8 <main+0x43c>)
 8001742:	f002 fe02 	bl	800434a <strcat>
				  strcat(url, url_date);
 8001746:	492e      	ldr	r1, [pc, #184]	; (8001800 <main+0x474>)
 8001748:	481f      	ldr	r0, [pc, #124]	; (80017c8 <main+0x43c>)
 800174a:	f002 fdfe 	bl	800434a <strcat>
				  strcat(url, gnss_data[3]);
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <main+0x428>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	4619      	mov	r1, r3
 8001754:	481c      	ldr	r0, [pc, #112]	; (80017c8 <main+0x43c>)
 8001756:	f002 fdf8 	bl	800434a <strcat>
				  strcat(url, url_time);
 800175a:	492a      	ldr	r1, [pc, #168]	; (8001804 <main+0x478>)
 800175c:	481a      	ldr	r0, [pc, #104]	; (80017c8 <main+0x43c>)
 800175e:	f002 fdf4 	bl	800434a <strcat>
				  strcat(url, gnss_data[2]);
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <main+0x428>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	4619      	mov	r1, r3
 8001768:	4817      	ldr	r0, [pc, #92]	; (80017c8 <main+0x43c>)
 800176a:	f002 fdee 	bl	800434a <strcat>
				  strcat(url, url_high);
 800176e:	4926      	ldr	r1, [pc, #152]	; (8001808 <main+0x47c>)
 8001770:	4815      	ldr	r0, [pc, #84]	; (80017c8 <main+0x43c>)
 8001772:	f002 fdea 	bl	800434a <strcat>
				  strcat(url, gnss_data[1]);
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <main+0x428>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4619      	mov	r1, r3
 800177c:	4812      	ldr	r0, [pc, #72]	; (80017c8 <main+0x43c>)
 800177e:	f002 fde4 	bl	800434a <strcat>

				  //send data through HTTP
				  A7670xx_httpPOST(&huart1, http_protocol, ip_address, puerto, url);
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <main+0x43c>)
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <main+0x480>)
 8001788:	4a21      	ldr	r2, [pc, #132]	; (8001810 <main+0x484>)
 800178a:	4922      	ldr	r1, [pc, #136]	; (8001814 <main+0x488>)
 800178c:	4822      	ldr	r0, [pc, #136]	; (8001818 <main+0x48c>)
 800178e:	f7ff f9fd 	bl	8000b8c <A7670xx_httpPOST>

				  memset(url, '\0', strlen(url)); //clear url array
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <main+0x43c>)
 8001794:	f7fe fd2e 	bl	80001f4 <strlen>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	2100      	movs	r1, #0
 800179e:	480a      	ldr	r0, [pc, #40]	; (80017c8 <main+0x43c>)
 80017a0:	f002 fdcb 	bl	800433a <memset>

				  count = 12; //reset counter
 80017a4:	4b01      	ldr	r3, [pc, #4]	; (80017ac <main+0x420>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	701a      	strb	r2, [r3, #0]
	  if(usart_itflag)
 80017aa:	e6ba      	b.n	8001522 <main+0x196>
 80017ac:	20000000 	.word	0x20000000
 80017b0:	200003dc 	.word	0x200003dc
 80017b4:	200003bc 	.word	0x200003bc
 80017b8:	080052bc 	.word	0x080052bc
 80017bc:	20000324 	.word	0x20000324
 80017c0:	2000039c 	.word	0x2000039c
 80017c4:	2000002c 	.word	0x2000002c
 80017c8:	20000444 	.word	0x20000444
 80017cc:	20000420 	.word	0x20000420
 80017d0:	20000048 	.word	0x20000048
 80017d4:	20000408 	.word	0x20000408
 80017d8:	20000050 	.word	0x20000050
 80017dc:	200003f8 	.word	0x200003f8
 80017e0:	20000040 	.word	0x20000040
 80017e4:	200003e4 	.word	0x200003e4
 80017e8:	20000058 	.word	0x20000058
 80017ec:	20000430 	.word	0x20000430
 80017f0:	20000060 	.word	0x20000060
 80017f4:	20000068 	.word	0x20000068
 80017f8:	20000070 	.word	0x20000070
 80017fc:	20000078 	.word	0x20000078
 8001800:	20000080 	.word	0x20000080
 8001804:	20000088 	.word	0x20000088
 8001808:	20000090 	.word	0x20000090
 800180c:	20000024 	.word	0x20000024
 8001810:	20000014 	.word	0x20000014
 8001814:	2000000c 	.word	0x2000000c
 8001818:	2000025c 	.word	0x2000025c

0800181c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	; 0x50
 8001820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	2230      	movs	r2, #48	; 0x30
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f002 fd85 	bl	800433a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <SystemClock_Config+0xb4>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <SystemClock_Config+0xb4>)
 800184a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184e:	6413      	str	r3, [r2, #64]	; 0x40
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <SystemClock_Config+0xb4>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <SystemClock_Config+0xb8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <SystemClock_Config+0xb8>)
 8001866:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <SystemClock_Config+0xb8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001878:	2301      	movs	r3, #1
 800187a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800187c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001882:	2300      	movs	r3, #0
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001886:	f107 0320 	add.w	r3, r7, #32
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fee4 	bl	8002658 <HAL_RCC_OscConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001896:	f000 f925 	bl	8001ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189a:	230f      	movs	r3, #15
 800189c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800189e:	2301      	movs	r3, #1
 80018a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 f947 	bl	8002b48 <HAL_RCC_ClockConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80018c0:	f000 f910 	bl	8001ae4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80018c4:	f001 fa26 	bl	8002d14 <HAL_RCC_EnableCSS>
}
 80018c8:	bf00      	nop
 80018ca:	3750      	adds	r7, #80	; 0x50
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000

080018d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <MX_USART1_UART_Init+0x50>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 8001910:	f001 fb21 	bl	8002f56 <HAL_UART_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800191a:	f000 f8e3 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000025c 	.word	0x2000025c
 8001928:	40011000 	.word	0x40011000

0800192c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <MX_GPIO_Init+0x108>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a3a      	ldr	r2, [pc, #232]	; (8001a34 <MX_GPIO_Init+0x108>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <MX_GPIO_Init+0x108>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <MX_GPIO_Init+0x108>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a33      	ldr	r2, [pc, #204]	; (8001a34 <MX_GPIO_Init+0x108>)
 8001968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <MX_GPIO_Init+0x108>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <MX_GPIO_Init+0x108>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a2c      	ldr	r2, [pc, #176]	; (8001a34 <MX_GPIO_Init+0x108>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <MX_GPIO_Init+0x108>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <MX_GPIO_Init+0x108>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <MX_GPIO_Init+0x108>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <MX_GPIO_Init+0x108>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b8:	481f      	ldr	r0, [pc, #124]	; (8001a38 <MX_GPIO_Init+0x10c>)
 80019ba:	f000 fe19 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_GPIO_Init+0x10c>)
 80019d8:	f000 fc86 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e2:	2303      	movs	r3, #3
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	4811      	ldr	r0, [pc, #68]	; (8001a38 <MX_GPIO_Init+0x10c>)
 80019f2:	f000 fc79 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019f6:	f649 13ff 	movw	r3, #39423	; 0x99ff
 80019fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fc:	2303      	movs	r3, #3
 80019fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480c      	ldr	r0, [pc, #48]	; (8001a3c <MX_GPIO_Init+0x110>)
 8001a0c:	f000 fc6c 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001a10:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8001a14:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a16:	2303      	movs	r3, #3
 8001a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_GPIO_Init+0x114>)
 8001a26:	f000 fc5f 	bl	80022e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020400 	.word	0x40020400

08001a44 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

//UART Rx ISR routine
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */

	if(((rx_data[0] == '\r' && ctn > 4)) && (usart_itflag == 0)) //if data received has ended
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_UART_RxCpltCallback+0x8c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b0d      	cmp	r3, #13
 8001a52:	d10e      	bne.n	8001a72 <HAL_UART_RxCpltCallback+0x2e>
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_UART_RxCpltCallback+0x90>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d90a      	bls.n	8001a72 <HAL_UART_RxCpltCallback+0x2e>
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_UART_RxCpltCallback+0x94>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d106      	bne.n	8001a72 <HAL_UART_RxCpltCallback+0x2e>
	{
		ctn = 0; //clear counter
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_UART_RxCpltCallback+0x90>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]

		usart_itflag = 1; //sets end of string flag
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_UART_RxCpltCallback+0x94>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e024      	b.n	8001abc <HAL_UART_RxCpltCallback+0x78>
	}
	else if(usart_itflag == 0)
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_UART_RxCpltCallback+0x94>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d120      	bne.n	8001abc <HAL_UART_RxCpltCallback+0x78>
	{
		if(strlen(rx_isrbuffer) >= 150) //to avoid overflows
 8001a7a:	4818      	ldr	r0, [pc, #96]	; (8001adc <HAL_UART_RxCpltCallback+0x98>)
 8001a7c:	f7fe fbba 	bl	80001f4 <strlen>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b95      	cmp	r3, #149	; 0x95
 8001a84:	d908      	bls.n	8001a98 <HAL_UART_RxCpltCallback+0x54>
			memset(rx_isrbuffer, '\0', strlen(rx_isrbuffer));
 8001a86:	4815      	ldr	r0, [pc, #84]	; (8001adc <HAL_UART_RxCpltCallback+0x98>)
 8001a88:	f7fe fbb4 	bl	80001f4 <strlen>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2100      	movs	r1, #0
 8001a92:	4812      	ldr	r0, [pc, #72]	; (8001adc <HAL_UART_RxCpltCallback+0x98>)
 8001a94:	f002 fc51 	bl	800433a <memset>

		if(rx_data[0] != '\r' && rx_data[0] != '\n')
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_UART_RxCpltCallback+0x8c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b0d      	cmp	r3, #13
 8001a9e:	d007      	beq.n	8001ab0 <HAL_UART_RxCpltCallback+0x6c>
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_UART_RxCpltCallback+0x8c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b0a      	cmp	r3, #10
 8001aa6:	d003      	beq.n	8001ab0 <HAL_UART_RxCpltCallback+0x6c>
			strcat(rx_isrbuffer, rx_data);
 8001aa8:	4909      	ldr	r1, [pc, #36]	; (8001ad0 <HAL_UART_RxCpltCallback+0x8c>)
 8001aaa:	480c      	ldr	r0, [pc, #48]	; (8001adc <HAL_UART_RxCpltCallback+0x98>)
 8001aac:	f002 fc4d 	bl	800434a <strcat>

		ctn++;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_UART_RxCpltCallback+0x90>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_UART_RxCpltCallback+0x90>)
 8001aba:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_data, 1);
 8001abc:	2201      	movs	r2, #1
 8001abe:	4904      	ldr	r1, [pc, #16]	; (8001ad0 <HAL_UART_RxCpltCallback+0x8c>)
 8001ac0:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <HAL_UART_RxCpltCallback+0x9c>)
 8001ac2:	f001 fbba 	bl	800323a <HAL_UART_Receive_IT>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002a8 	.word	0x200002a8
 8001ad4:	200003e1 	.word	0x200003e1
 8001ad8:	200003e0 	.word	0x200003e0
 8001adc:	200002ac 	.word	0x200002ac
 8001ae0:	2000025c 	.word	0x2000025c

08001ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
}
 8001aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aec:	e7fe      	b.n	8001aec <Error_Handler+0x8>
	...

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a26      	ldr	r2, [pc, #152]	; (8001bf8 <HAL_UART_MspInit+0xb8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d145      	bne.n	8001bee <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_UART_MspInit+0xbc>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a24      	ldr	r2, [pc, #144]	; (8001bfc <HAL_UART_MspInit+0xbc>)
 8001b6c:	f043 0310 	orr.w	r3, r3, #16
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <HAL_UART_MspInit+0xbc>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_UART_MspInit+0xbc>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_UART_MspInit+0xbc>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_UART_MspInit+0xbc>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bac:	2307      	movs	r3, #7
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4812      	ldr	r0, [pc, #72]	; (8001c00 <HAL_UART_MspInit+0xc0>)
 8001bb8:	f000 fb96 	bl	80022e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bce:	2307      	movs	r3, #7
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4809      	ldr	r0, [pc, #36]	; (8001c00 <HAL_UART_MspInit+0xc0>)
 8001bda:	f000 fb85 	bl	80022e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2101      	movs	r1, #1
 8001be2:	2025      	movs	r0, #37	; 0x25
 8001be4:	f000 fab7 	bl	8002156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001be8:	2025      	movs	r0, #37	; 0x25
 8001bea:	f000 fad0 	bl	800218e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	; 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000

08001c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001c08:	f001 f98a 	bl	8002f20 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler+0x8>

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 f960 	bl	8001f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <USART1_IRQHandler+0x10>)
 8001c62:	f001 fb0f 	bl	8003284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000025c 	.word	0x2000025c

08001c70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return 1;
 8001c74:	2301      	movs	r3, #1
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <_kill>:

int _kill(int pid, int sig)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8a:	f002 fc45 	bl	8004518 <__errno>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2216      	movs	r2, #22
 8001c92:	601a      	str	r2, [r3, #0]
  return -1;
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_exit>:

void _exit (int status)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ffe7 	bl	8001c80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb2:	e7fe      	b.n	8001cb2 <_exit+0x12>

08001cb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e00a      	b.n	8001cdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc6:	f3af 8000 	nop.w
 8001cca:	4601      	mov	r1, r0
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	60ba      	str	r2, [r7, #8]
 8001cd2:	b2ca      	uxtb	r2, r1
 8001cd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf0      	blt.n	8001cc6 <_read+0x12>
  }

  return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e009      	b.n	8001d14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	60ba      	str	r2, [r7, #8]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3301      	adds	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	dbf1      	blt.n	8001d00 <_write+0x12>
  }
  return len;
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_close>:

int _close(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <_isatty>:

int _isatty(int file)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f002 fbaa 	bl	8004518 <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20020000 	.word	0x20020000
 8001df0:	00000400 	.word	0x00000400
 8001df4:	20000520 	.word	0x20000520
 8001df8:	20000678 	.word	0x20000678

08001dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <SystemInit+0x20>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <SystemInit+0x20>)
 8001e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e24:	f7ff ffea 	bl	8001dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e28:	480c      	ldr	r0, [pc, #48]	; (8001e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e2a:	490d      	ldr	r1, [pc, #52]	; (8001e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	; (8001e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e30:	e002      	b.n	8001e38 <LoopCopyDataInit>

08001e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e36:	3304      	adds	r3, #4

08001e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e3c:	d3f9      	bcc.n	8001e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e40:	4c0a      	ldr	r4, [pc, #40]	; (8001e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e44:	e001      	b.n	8001e4a <LoopFillZerobss>

08001e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e48:	3204      	adds	r2, #4

08001e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e4c:	d3fb      	bcc.n	8001e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f002 fb69 	bl	8004524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e52:	f7ff fa9b 	bl	800138c <main>
  bx  lr    
 8001e56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001e64:	08005498 	.word	0x08005498
  ldr r2, =_sbss
 8001e68:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001e6c:	20000674 	.word	0x20000674

08001e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC_IRQHandler>
	...

08001e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_Init+0x40>)
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_Init+0x40>)
 8001e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_Init+0x40>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f94f 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea2:	200f      	movs	r0, #15
 8001ea4:	f000 f808 	bl	8001eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea8:	f7ff fe22 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x54>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x58>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f967 	bl	80021aa <HAL_SYSTICK_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00e      	b.n	8001f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d80a      	bhi.n	8001f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef4:	f000 f92f 	bl	8002156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef8:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <HAL_InitTick+0x5c>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000098 	.word	0x20000098
 8001f10:	200000a0 	.word	0x200000a0
 8001f14:	2000009c 	.word	0x2000009c

08001f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x20>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x24>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_IncTick+0x24>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	200000a0 	.word	0x200000a0
 8001f3c:	20000524 	.word	0x20000524

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000524 	.word	0x20000524

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_Delay+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffde 	bl	8001f40 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200000a0 	.word	0x200000a0

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff29 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff3e 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff8e 	bl	8002094 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff31 	bl	8002004 <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffa2 	bl	80020fc <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff feb6 	bl	8001f40 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d008      	beq.n	80021f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e052      	b.n	800229a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0216 	bic.w	r2, r2, #22
 8002202:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002212:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <HAL_DMA_Abort+0x62>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0208 	bic.w	r2, r2, #8
 8002232:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002244:	e013      	b.n	800226e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002246:	f7ff fe7b 	bl	8001f40 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b05      	cmp	r3, #5
 8002252:	d90c      	bls.n	800226e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2203      	movs	r2, #3
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e015      	b.n	800229a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e4      	bne.n	8002246 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	223f      	movs	r2, #63	; 0x3f
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d004      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e00c      	b.n	80022da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2205      	movs	r2, #5
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e159      	b.n	80025b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 8148 	bne.w	80025b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d005      	beq.n	800233a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002336:	2b02      	cmp	r3, #2
 8002338:	d130      	bne.n	800239c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 0201 	and.w	r2, r3, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d017      	beq.n	80023d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d123      	bne.n	800242c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a2 	beq.w	80025b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b57      	ldr	r3, [pc, #348]	; (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	4a56      	ldr	r2, [pc, #344]	; (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800247c:	6453      	str	r3, [r2, #68]	; 0x44
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248a:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <HAL_GPIO_Init+0x2ec>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a49      	ldr	r2, [pc, #292]	; (80025d8 <HAL_GPIO_Init+0x2f0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d019      	beq.n	80024ea <HAL_GPIO_Init+0x202>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a48      	ldr	r2, [pc, #288]	; (80025dc <HAL_GPIO_Init+0x2f4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_GPIO_Init+0x1fe>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a47      	ldr	r2, [pc, #284]	; (80025e0 <HAL_GPIO_Init+0x2f8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00d      	beq.n	80024e2 <HAL_GPIO_Init+0x1fa>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a46      	ldr	r2, [pc, #280]	; (80025e4 <HAL_GPIO_Init+0x2fc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <HAL_GPIO_Init+0x1f6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a45      	ldr	r2, [pc, #276]	; (80025e8 <HAL_GPIO_Init+0x300>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d101      	bne.n	80024da <HAL_GPIO_Init+0x1f2>
 80024d6:	2304      	movs	r3, #4
 80024d8:	e008      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024da:	2307      	movs	r3, #7
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024de:	2303      	movs	r3, #3
 80024e0:	e004      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024ea:	2300      	movs	r3, #0
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f002 0203 	and.w	r2, r2, #3
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	4093      	lsls	r3, r2
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024fc:	4935      	ldr	r1, [pc, #212]	; (80025d4 <HAL_GPIO_Init+0x2ec>)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250a:	4b38      	ldr	r3, [pc, #224]	; (80025ec <HAL_GPIO_Init+0x304>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252e:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002558:	4a24      	ldr	r2, [pc, #144]	; (80025ec <HAL_GPIO_Init+0x304>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002582:	4a1a      	ldr	r2, [pc, #104]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_GPIO_Init+0x304>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ac:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <HAL_GPIO_Init+0x304>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b0f      	cmp	r3, #15
 80025bc:	f67f aea2 	bls.w	8002304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40013c00 	.word	0x40013c00

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800260c:	e003      	b.n	8002616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002634:	887a      	ldrh	r2, [r7, #2]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	041a      	lsls	r2, r3, #16
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43d9      	mvns	r1, r3
 8002640:	887b      	ldrh	r3, [r7, #2]
 8002642:	400b      	ands	r3, r1
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e267      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d075      	beq.n	8002762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002676:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b04      	cmp	r3, #4
 8002680:	d00c      	beq.n	800269c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002682:	4b85      	ldr	r3, [pc, #532]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268a:	2b08      	cmp	r3, #8
 800268c:	d112      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268e:	4b82      	ldr	r3, [pc, #520]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269a:	d10b      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269c:	4b7e      	ldr	r3, [pc, #504]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d05b      	beq.n	8002760 <HAL_RCC_OscConfig+0x108>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d157      	bne.n	8002760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e242      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d106      	bne.n	80026cc <HAL_RCC_OscConfig+0x74>
 80026be:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a75      	ldr	r2, [pc, #468]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e01d      	b.n	8002708 <HAL_RCC_OscConfig+0xb0>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x98>
 80026d6:	4b70      	ldr	r3, [pc, #448]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6f      	ldr	r2, [pc, #444]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a6c      	ldr	r2, [pc, #432]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0xb0>
 80026f0:	4b69      	ldr	r3, [pc, #420]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a68      	ldr	r2, [pc, #416]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b66      	ldr	r3, [pc, #408]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a65      	ldr	r2, [pc, #404]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fc16 	bl	8001f40 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002718:	f7ff fc12 	bl	8001f40 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e207      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b5b      	ldr	r3, [pc, #364]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0xc0>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff fc02 	bl	8001f40 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff fbfe 	bl	8001f40 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1f3      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	4b51      	ldr	r3, [pc, #324]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0xe8>
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d063      	beq.n	8002836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00b      	beq.n	8002792 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002782:	2b08      	cmp	r3, #8
 8002784:	d11c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002786:	4b44      	ldr	r3, [pc, #272]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_RCC_OscConfig+0x152>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e1c7      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4937      	ldr	r1, [pc, #220]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	e03a      	b.n	8002836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c8:	4b34      	ldr	r3, [pc, #208]	; (800289c <HAL_RCC_OscConfig+0x244>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7ff fbb7 	bl	8001f40 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d6:	f7ff fbb3 	bl	8001f40 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e1a8      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b28      	ldr	r3, [pc, #160]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4925      	ldr	r1, [pc, #148]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
 8002808:	e015      	b.n	8002836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCC_OscConfig+0x244>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7ff fb96 	bl	8001f40 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002818:	f7ff fb92 	bl	8001f40 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e187      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d036      	beq.n	80028b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_RCC_OscConfig+0x248>)
 800284c:	2201      	movs	r2, #1
 800284e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7ff fb76 	bl	8001f40 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002858:	f7ff fb72 	bl	8001f40 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e167      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 800286c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x200>
 8002876:	e01b      	b.n	80028b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_OscConfig+0x248>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7ff fb5f 	bl	8001f40 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002884:	e00e      	b.n	80028a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002886:	f7ff fb5b 	bl	8001f40 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d907      	bls.n	80028a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e150      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
 8002898:	40023800 	.word	0x40023800
 800289c:	42470000 	.word	0x42470000
 80028a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a4:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80028a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ea      	bne.n	8002886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8097 	beq.w	80029ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c2:	4b81      	ldr	r3, [pc, #516]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	4b7d      	ldr	r3, [pc, #500]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a7c      	ldr	r2, [pc, #496]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80028d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b7a      	ldr	r3, [pc, #488]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b77      	ldr	r3, [pc, #476]	; (8002acc <HAL_RCC_OscConfig+0x474>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d118      	bne.n	800292c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fa:	4b74      	ldr	r3, [pc, #464]	; (8002acc <HAL_RCC_OscConfig+0x474>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a73      	ldr	r2, [pc, #460]	; (8002acc <HAL_RCC_OscConfig+0x474>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002906:	f7ff fb1b 	bl	8001f40 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290e:	f7ff fb17 	bl	8001f40 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e10c      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <HAL_RCC_OscConfig+0x474>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0x2ea>
 8002934:	4b64      	ldr	r3, [pc, #400]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a63      	ldr	r2, [pc, #396]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
 8002940:	e01c      	b.n	800297c <HAL_RCC_OscConfig+0x324>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x30c>
 800294a:	4b5f      	ldr	r3, [pc, #380]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a5e      	ldr	r2, [pc, #376]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
 8002956:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	4a5b      	ldr	r2, [pc, #364]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6713      	str	r3, [r2, #112]	; 0x70
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0x324>
 8002964:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	4a57      	ldr	r2, [pc, #348]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	; 0x70
 8002970:	4b55      	ldr	r3, [pc, #340]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	4a54      	ldr	r2, [pc, #336]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002976:	f023 0304 	bic.w	r3, r3, #4
 800297a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d015      	beq.n	80029b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7ff fadc 	bl	8001f40 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7ff fad8 	bl	8001f40 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e0cb      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a2:	4b49      	ldr	r3, [pc, #292]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0ee      	beq.n	800298c <HAL_RCC_OscConfig+0x334>
 80029ae:	e014      	b.n	80029da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b0:	f7ff fac6 	bl	8001f40 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7ff fac2 	bl	8001f40 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0b5      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ce:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ee      	bne.n	80029b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029da:	7dfb      	ldrb	r3, [r7, #23]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d105      	bne.n	80029ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e0:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	4a38      	ldr	r2, [pc, #224]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a1 	beq.w	8002b38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f6:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d05c      	beq.n	8002abc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d141      	bne.n	8002a8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b31      	ldr	r3, [pc, #196]	; (8002ad0 <HAL_RCC_OscConfig+0x478>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7ff fa96 	bl	8001f40 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a18:	f7ff fa92 	bl	8001f40 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e087      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	019b      	lsls	r3, r3, #6
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	085b      	lsrs	r3, r3, #1
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	491b      	ldr	r1, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x478>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7ff fa6b 	bl	8001f40 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7ff fa67 	bl	8001f40 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e05c      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x416>
 8002a8c:	e054      	b.n	8002b38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x478>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7ff fa54 	bl	8001f40 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7ff fa50 	bl	8001f40 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e045      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x444>
 8002aba:	e03d      	b.n	8002b38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e038      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_RCC_OscConfig+0x4ec>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d028      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d121      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d11a      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b04:	4013      	ands	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d111      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800

08002b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0cc      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b68      	ldr	r3, [pc, #416]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d90c      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b65      	ldr	r3, [pc, #404]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0b8      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d020      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b9c:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a58      	ldr	r2, [pc, #352]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ba6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb4:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	494d      	ldr	r1, [pc, #308]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d044      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d119      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e07f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e06f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e067      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4934      	ldr	r1, [pc, #208]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c38:	f7ff f982 	bl	8001f40 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7ff f97e 	bl	8001f40 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e04f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d20c      	bcs.n	8002c90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e032      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4916      	ldr	r1, [pc, #88]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	490e      	ldr	r1, [pc, #56]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cce:	f000 f82d 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	490a      	ldr	r1, [pc, #40]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce0:	5ccb      	ldrb	r3, [r1, r3]
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f8e2 	bl	8001eb8 <HAL_InitTick>

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023c00 	.word	0x40023c00
 8002d04:	40023800 	.word	0x40023800
 8002d08:	08005390 	.word	0x08005390
 8002d0c:	20000098 	.word	0x20000098
 8002d10:	2000009c 	.word	0x2000009c

08002d14 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_RCC_EnableCSS+0x14>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	4247004c 	.word	0x4247004c

08002d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d30:	b090      	sub	sp, #64	; 0x40
 8002d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d00d      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x40>
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	f200 80a1 	bhi.w	8002e98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x34>
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d5e:	e09b      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d64:	e09b      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d66:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d6a:	e098      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d6c:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d76:	4b4d      	ldr	r3, [pc, #308]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d82:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	099b      	lsrs	r3, r3, #6
 8002d88:	2200      	movs	r2, #0
 8002d8a:	623b      	str	r3, [r7, #32]
 8002d8c:	627a      	str	r2, [r7, #36]	; 0x24
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d94:	2100      	movs	r1, #0
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d98:	fb03 f201 	mul.w	r2, r3, r1
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	fb00 f303 	mul.w	r3, r0, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	4a43      	ldr	r2, [pc, #268]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002da6:	fba0 1202 	umull	r1, r2, r0, r2
 8002daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dac:	460a      	mov	r2, r1
 8002dae:	62ba      	str	r2, [r7, #40]	; 0x28
 8002db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db2:	4413      	add	r3, r2
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	2200      	movs	r2, #0
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	61fa      	str	r2, [r7, #28]
 8002dbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dc6:	f7fd fa73 	bl	80002b0 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4613      	mov	r3, r2
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd2:	e053      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd4:	4b35      	ldr	r3, [pc, #212]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	2200      	movs	r2, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	617a      	str	r2, [r7, #20]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002de6:	f04f 0b00 	mov.w	fp, #0
 8002dea:	4652      	mov	r2, sl
 8002dec:	465b      	mov	r3, fp
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfc:	0150      	lsls	r0, r2, #5
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	ebb2 080a 	subs.w	r8, r2, sl
 8002e06:	eb63 090b 	sbc.w	r9, r3, fp
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e22:	eb63 0509 	sbc.w	r5, r3, r9
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	00eb      	lsls	r3, r5, #3
 8002e30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e34:	00e2      	lsls	r2, r4, #3
 8002e36:	4614      	mov	r4, r2
 8002e38:	461d      	mov	r5, r3
 8002e3a:	eb14 030a 	adds.w	r3, r4, sl
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	eb45 030b 	adc.w	r3, r5, fp
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e52:	4629      	mov	r1, r5
 8002e54:	028b      	lsls	r3, r1, #10
 8002e56:	4621      	mov	r1, r4
 8002e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	028a      	lsls	r2, r1, #10
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	2200      	movs	r2, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	60fa      	str	r2, [r7, #12]
 8002e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e70:	f7fd fa1e 	bl	80002b0 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4613      	mov	r3, r2
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3740      	adds	r7, #64	; 0x40
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	00f42400 	.word	0x00f42400
 8002eb4:	017d7840 	.word	0x017d7840

08002eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000098 	.word	0x20000098

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ed4:	f7ff fff0 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0a9b      	lsrs	r3, r3, #10
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	080053a0 	.word	0x080053a0

08002ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002efc:	f7ff ffdc 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	0b5b      	lsrs	r3, r3, #13
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4903      	ldr	r1, [pc, #12]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	080053a0 	.word	0x080053a0

08002f20 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	2b80      	cmp	r3, #128	; 0x80
 8002f2e:	d104      	bne.n	8002f3a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002f30:	f000 f80a 	bl	8002f48 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002f36:	2280      	movs	r2, #128	; 0x80
 8002f38:	701a      	strb	r2, [r3, #0]
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	4002380e 	.word	0x4002380e

08002f48 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e042      	b.n	8002fee <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7fe fddf 	bl	8001b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2224      	movs	r2, #36	; 0x24
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f98:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fe54 	bl	8003c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fbe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b08a      	sub	sp, #40	; 0x28
 8002ffa:	af02      	add	r7, sp, #8
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b20      	cmp	r3, #32
 8003014:	d175      	bne.n	8003102 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_UART_Transmit+0x2c>
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e06e      	b.n	8003104 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2221      	movs	r2, #33	; 0x21
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003034:	f7fe ff84 	bl	8001f40 <HAL_GetTick>
 8003038:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304e:	d108      	bne.n	8003062 <HAL_UART_Transmit+0x6c>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d104      	bne.n	8003062 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	e003      	b.n	800306a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800306a:	e02e      	b.n	80030ca <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2200      	movs	r2, #0
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fbb6 	bl	80037e8 <UART_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e03a      	b.n	8003104 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	3302      	adds	r3, #2
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	e007      	b.n	80030bc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3301      	adds	r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1cb      	bne.n	800306c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2200      	movs	r2, #0
 80030dc:	2140      	movs	r1, #64	; 0x40
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fb82 	bl	80037e8 <UART_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e006      	b.n	8003104 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
  }
}
 8003104:	4618      	mov	r0, r3
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b20      	cmp	r3, #32
 800312a:	f040 8081 	bne.w	8003230 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_UART_Receive+0x2e>
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e079      	b.n	8003232 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2222      	movs	r2, #34	; 0x22
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003152:	f7fe fef5 	bl	8001f40 <HAL_GetTick>
 8003156:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	88fa      	ldrh	r2, [r7, #6]
 8003162:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316c:	d108      	bne.n	8003180 <HAL_UART_Receive+0x74>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d104      	bne.n	8003180 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	e003      	b.n	8003188 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003188:	e047      	b.n	800321a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	2120      	movs	r1, #32
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fb27 	bl	80037e8 <UART_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e042      	b.n	8003232 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031be:	b29a      	uxth	r2, r3
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	3302      	adds	r3, #2
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	e01f      	b.n	800320c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d4:	d007      	beq.n	80031e6 <HAL_UART_Receive+0xda>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <HAL_UART_Receive+0xe8>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e008      	b.n	8003206 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003200:	b2da      	uxtb	r2, r3
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3301      	adds	r3, #1
 800320a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1b2      	bne.n	800318a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	4613      	mov	r3, r2
 8003246:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b20      	cmp	r3, #32
 8003252:	d112      	bne.n	800327a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_UART_Receive_IT+0x26>
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e00b      	b.n	800327c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	461a      	mov	r2, r3
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fb12 	bl	800389a <UART_Start_Receive_IT>
 8003276:	4603      	mov	r3, r0
 8003278:	e000      	b.n	800327c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
  }
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b0ba      	sub	sp, #232	; 0xe8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_UART_IRQHandler+0x66>
 80032d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fbf2 	bl	8003acc <UART_Receive_IT>
      return;
 80032e8:	e25b      	b.n	80037a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80de 	beq.w	80034b0 <HAL_UART_IRQHandler+0x22c>
 80032f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003304:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80d1 	beq.w	80034b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800330e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00b      	beq.n	8003332 <HAL_UART_IRQHandler+0xae>
 800331a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f043 0201 	orr.w	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <HAL_UART_IRQHandler+0xd2>
 800333e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f043 0202 	orr.w	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_UART_IRQHandler+0xf6>
 8003362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f043 0204 	orr.w	r2, r3, #4
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d011      	beq.n	80033aa <HAL_UART_IRQHandler+0x126>
 8003386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f043 0208 	orr.w	r2, r3, #8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 81f2 	beq.w	8003798 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_UART_IRQHandler+0x14e>
 80033c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fb7d 	bl	8003acc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033dc:	2b40      	cmp	r3, #64	; 0x40
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <HAL_UART_IRQHandler+0x17a>
 80033f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d04f      	beq.n	800349e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fa85 	bl	800390e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d141      	bne.n	8003496 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3314      	adds	r3, #20
 8003418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800342c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3314      	adds	r3, #20
 800343a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800343e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800344a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1d9      	bne.n	8003412 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d013      	beq.n	800348e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346a:	4a7e      	ldr	r2, [pc, #504]	; (8003664 <HAL_UART_IRQHandler+0x3e0>)
 800346c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe ff15 	bl	80022a2 <HAL_DMA_Abort_IT>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003488:	4610      	mov	r0, r2
 800348a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348c:	e00e      	b.n	80034ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f994 	bl	80037bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003494:	e00a      	b.n	80034ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f990 	bl	80037bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349c:	e006      	b.n	80034ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f98c 	bl	80037bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80034aa:	e175      	b.n	8003798 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	bf00      	nop
    return;
 80034ae:	e173      	b.n	8003798 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	f040 814f 	bne.w	8003758 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8148 	beq.w	8003758 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8141 	beq.w	8003758 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	f040 80b6 	bne.w	8003668 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003508:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8145 	beq.w	800379c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800351a:	429a      	cmp	r2, r3
 800351c:	f080 813e 	bcs.w	800379c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003526:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003532:	f000 8088 	beq.w	8003646 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800354c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800356e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800357a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1d9      	bne.n	8003536 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3314      	adds	r3, #20
 8003588:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3314      	adds	r3, #20
 80035a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e1      	bne.n	8003582 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3314      	adds	r3, #20
 80035c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3314      	adds	r3, #20
 80035de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e3      	bne.n	80035be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003616:	f023 0310 	bic.w	r3, r3, #16
 800361a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003628:	65ba      	str	r2, [r7, #88]	; 0x58
 800362a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800362e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003630:	e841 2300 	strex	r3, r2, [r1]
 8003634:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e3      	bne.n	8003604 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe fdbe 	bl	80021c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003654:	b29b      	uxth	r3, r3
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	b29b      	uxth	r3, r3
 800365a:	4619      	mov	r1, r3
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f8b7 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003662:	e09b      	b.n	800379c <HAL_UART_IRQHandler+0x518>
 8003664:	080039d5 	.word	0x080039d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003670:	b29b      	uxth	r3, r3
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 808e 	beq.w	80037a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8089 	beq.w	80037a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	330c      	adds	r3, #12
 80036ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80036b2:	647a      	str	r2, [r7, #68]	; 0x44
 80036b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e3      	bne.n	800368e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3314      	adds	r3, #20
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	e853 3f00 	ldrex	r3, [r3]
 80036d4:	623b      	str	r3, [r7, #32]
   return(result);
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3314      	adds	r3, #20
 80036e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036ea:	633a      	str	r2, [r7, #48]	; 0x30
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e3      	bne.n	80036c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	60fb      	str	r3, [r7, #12]
   return(result);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0310 	bic.w	r3, r3, #16
 8003722:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003730:	61fa      	str	r2, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	617b      	str	r3, [r7, #20]
   return(result);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e3      	bne.n	800370c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800374a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f83d 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003756:	e023      	b.n	80037a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <HAL_UART_IRQHandler+0x4f4>
 8003764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f943 	bl	80039fc <UART_Transmit_IT>
    return;
 8003776:	e014      	b.n	80037a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00e      	beq.n	80037a2 <HAL_UART_IRQHandler+0x51e>
 8003784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f983 	bl	8003a9c <UART_EndTransmit_IT>
    return;
 8003796:	e004      	b.n	80037a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003798:	bf00      	nop
 800379a:	e002      	b.n	80037a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800379c:	bf00      	nop
 800379e:	e000      	b.n	80037a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80037a0:	bf00      	nop
  }
}
 80037a2:	37e8      	adds	r7, #232	; 0xe8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f8:	e03b      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003800:	d037      	beq.n	8003872 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003802:	f7fe fb9d 	bl	8001f40 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	6a3a      	ldr	r2, [r7, #32]
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <UART_WaitOnFlagUntilTimeout+0x30>
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e03a      	b.n	8003892 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d023      	beq.n	8003872 <UART_WaitOnFlagUntilTimeout+0x8a>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d020      	beq.n	8003872 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d01d      	beq.n	8003872 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b08      	cmp	r3, #8
 8003842:	d116      	bne.n	8003872 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f857 	bl	800390e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2208      	movs	r2, #8
 8003864:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e00f      	b.n	8003892 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4013      	ands	r3, r2
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	bf0c      	ite	eq
 8003882:	2301      	moveq	r3, #1
 8003884:	2300      	movne	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	429a      	cmp	r2, r3
 800388e:	d0b4      	beq.n	80037fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	4613      	mov	r3, r2
 80038a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	88fa      	ldrh	r2, [r7, #6]
 80038b2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2222      	movs	r2, #34	; 0x22
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0220 	orr.w	r2, r2, #32
 80038fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800390e:	b480      	push	{r7}
 8003910:	b095      	sub	sp, #84	; 0x54
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800392c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003936:	643a      	str	r2, [r7, #64]	; 0x40
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800393c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e5      	bne.n	8003916 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	61fb      	str	r3, [r7, #28]
   return(result);
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	64bb      	str	r3, [r7, #72]	; 0x48
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3314      	adds	r3, #20
 8003968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800396a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e5      	bne.n	800394a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	2b01      	cmp	r3, #1
 8003984:	d119      	bne.n	80039ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	60bb      	str	r3, [r7, #8]
   return(result);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f023 0310 	bic.w	r3, r3, #16
 800399c:	647b      	str	r3, [r7, #68]	; 0x44
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a6:	61ba      	str	r2, [r7, #24]
 80039a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6979      	ldr	r1, [r7, #20]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	613b      	str	r3, [r7, #16]
   return(result);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e5      	bne.n	8003986 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039c8:	bf00      	nop
 80039ca:	3754      	adds	r7, #84	; 0x54
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff fee4 	bl	80037bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b21      	cmp	r3, #33	; 0x21
 8003a0e:	d13e      	bne.n	8003a8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a18:	d114      	bne.n	8003a44 <UART_Transmit_IT+0x48>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d110      	bne.n	8003a44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	1c9a      	adds	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]
 8003a42:	e008      	b.n	8003a56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	1c59      	adds	r1, r3, #1
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6211      	str	r1, [r2, #32]
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4619      	mov	r1, r3
 8003a64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fe73 	bl	80037a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08c      	sub	sp, #48	; 0x30
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b22      	cmp	r3, #34	; 0x22
 8003ade:	f040 80ae 	bne.w	8003c3e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aea:	d117      	bne.n	8003b1c <UART_Receive_IT+0x50>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d113      	bne.n	8003b1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	1c9a      	adds	r2, r3, #2
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
 8003b1a:	e026      	b.n	8003b6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2e:	d007      	beq.n	8003b40 <UART_Receive_IT+0x74>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <UART_Receive_IT+0x82>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e008      	b.n	8003b60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4619      	mov	r1, r3
 8003b78:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d15d      	bne.n	8003c3a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0220 	bic.w	r2, r2, #32
 8003b8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d135      	bne.n	8003c30 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f023 0310 	bic.w	r3, r3, #16
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	623a      	str	r2, [r7, #32]
 8003bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	69f9      	ldr	r1, [r7, #28]
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e5      	bne.n	8003bca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d10a      	bne.n	8003c22 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c26:	4619      	mov	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff fdd1 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
 8003c2e:	e002      	b.n	8003c36 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7fd ff07 	bl	8001a44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e002      	b.n	8003c40 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e000      	b.n	8003c40 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c3e:	2302      	movs	r3, #2
  }
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3730      	adds	r7, #48	; 0x30
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c4c:	b0c0      	sub	sp, #256	; 0x100
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	68d9      	ldr	r1, [r3, #12]
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	ea40 0301 	orr.w	r3, r0, r1
 8003c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ca0:	f021 010c 	bic.w	r1, r1, #12
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	6999      	ldr	r1, [r3, #24]
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	ea40 0301 	orr.w	r3, r0, r1
 8003cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b8f      	ldr	r3, [pc, #572]	; (8003f14 <UART_SetConfig+0x2cc>)
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d005      	beq.n	8003ce8 <UART_SetConfig+0xa0>
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b8d      	ldr	r3, [pc, #564]	; (8003f18 <UART_SetConfig+0x2d0>)
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d104      	bne.n	8003cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ce8:	f7ff f906 	bl	8002ef8 <HAL_RCC_GetPCLK2Freq>
 8003cec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cf0:	e003      	b.n	8003cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cf2:	f7ff f8ed 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8003cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d04:	f040 810c 	bne.w	8003f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d1a:	4622      	mov	r2, r4
 8003d1c:	462b      	mov	r3, r5
 8003d1e:	1891      	adds	r1, r2, r2
 8003d20:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d22:	415b      	adcs	r3, r3
 8003d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	eb12 0801 	adds.w	r8, r2, r1
 8003d30:	4629      	mov	r1, r5
 8003d32:	eb43 0901 	adc.w	r9, r3, r1
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d4a:	4690      	mov	r8, r2
 8003d4c:	4699      	mov	r9, r3
 8003d4e:	4623      	mov	r3, r4
 8003d50:	eb18 0303 	adds.w	r3, r8, r3
 8003d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d58:	462b      	mov	r3, r5
 8003d5a:	eb49 0303 	adc.w	r3, r9, r3
 8003d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d76:	460b      	mov	r3, r1
 8003d78:	18db      	adds	r3, r3, r3
 8003d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	eb42 0303 	adc.w	r3, r2, r3
 8003d82:	657b      	str	r3, [r7, #84]	; 0x54
 8003d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d8c:	f7fc fa90 	bl	80002b0 <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4b61      	ldr	r3, [pc, #388]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003d96:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	011c      	lsls	r4, r3, #4
 8003d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003da8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003db0:	4642      	mov	r2, r8
 8003db2:	464b      	mov	r3, r9
 8003db4:	1891      	adds	r1, r2, r2
 8003db6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003db8:	415b      	adcs	r3, r3
 8003dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de0:	4692      	mov	sl, r2
 8003de2:	469b      	mov	fp, r3
 8003de4:	4643      	mov	r3, r8
 8003de6:	eb1a 0303 	adds.w	r3, sl, r3
 8003dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dee:	464b      	mov	r3, r9
 8003df0:	eb4b 0303 	adc.w	r3, fp, r3
 8003df4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	18db      	adds	r3, r3, r3
 8003e10:	643b      	str	r3, [r7, #64]	; 0x40
 8003e12:	4613      	mov	r3, r2
 8003e14:	eb42 0303 	adc.w	r3, r2, r3
 8003e18:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e22:	f7fc fa45 	bl	80002b0 <__aeabi_uldivmod>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2264      	movs	r2, #100	; 0x64
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	1acb      	subs	r3, r1, r3
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e42:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003e44:	fba3 2302 	umull	r2, r3, r3, r2
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e50:	441c      	add	r4, r3
 8003e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e64:	4642      	mov	r2, r8
 8003e66:	464b      	mov	r3, r9
 8003e68:	1891      	adds	r1, r2, r2
 8003e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e6c:	415b      	adcs	r3, r3
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e74:	4641      	mov	r1, r8
 8003e76:	1851      	adds	r1, r2, r1
 8003e78:	6339      	str	r1, [r7, #48]	; 0x30
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	414b      	adcs	r3, r1
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	00cb      	lsls	r3, r1, #3
 8003e90:	4651      	mov	r1, sl
 8003e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e96:	4651      	mov	r1, sl
 8003e98:	00ca      	lsls	r2, r1, #3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	460a      	mov	r2, r1
 8003eac:	eb42 0303 	adc.w	r3, r2, r3
 8003eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ec8:	460b      	mov	r3, r1
 8003eca:	18db      	adds	r3, r3, r3
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ece:	4613      	mov	r3, r2
 8003ed0:	eb42 0303 	adc.w	r3, r2, r3
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ede:	f7fc f9e7 	bl	80002b0 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2164      	movs	r1, #100	; 0x64
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	3332      	adds	r3, #50	; 0x32
 8003efa:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	f003 0207 	and.w	r2, r3, #7
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4422      	add	r2, r4
 8003f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f10:	e106      	b.n	8004120 <UART_SetConfig+0x4d8>
 8003f12:	bf00      	nop
 8003f14:	40011000 	.word	0x40011000
 8003f18:	40011400 	.word	0x40011400
 8003f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f32:	4642      	mov	r2, r8
 8003f34:	464b      	mov	r3, r9
 8003f36:	1891      	adds	r1, r2, r2
 8003f38:	6239      	str	r1, [r7, #32]
 8003f3a:	415b      	adcs	r3, r3
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f42:	4641      	mov	r1, r8
 8003f44:	1854      	adds	r4, r2, r1
 8003f46:	4649      	mov	r1, r9
 8003f48:	eb43 0501 	adc.w	r5, r3, r1
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	00eb      	lsls	r3, r5, #3
 8003f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5a:	00e2      	lsls	r2, r4, #3
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	4643      	mov	r3, r8
 8003f62:	18e3      	adds	r3, r4, r3
 8003f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f68:	464b      	mov	r3, r9
 8003f6a:	eb45 0303 	adc.w	r3, r5, r3
 8003f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f8e:	4629      	mov	r1, r5
 8003f90:	008b      	lsls	r3, r1, #2
 8003f92:	4621      	mov	r1, r4
 8003f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f98:	4621      	mov	r1, r4
 8003f9a:	008a      	lsls	r2, r1, #2
 8003f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fa0:	f7fc f986 	bl	80002b0 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4b60      	ldr	r3, [pc, #384]	; (800412c <UART_SetConfig+0x4e4>)
 8003faa:	fba3 2302 	umull	r2, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	011c      	lsls	r4, r3, #4
 8003fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	1891      	adds	r1, r2, r2
 8003fca:	61b9      	str	r1, [r7, #24]
 8003fcc:	415b      	adcs	r3, r3
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	1851      	adds	r1, r2, r1
 8003fd8:	6139      	str	r1, [r7, #16]
 8003fda:	4649      	mov	r1, r9
 8003fdc:	414b      	adcs	r3, r1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fec:	4659      	mov	r1, fp
 8003fee:	00cb      	lsls	r3, r1, #3
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff6:	4651      	mov	r1, sl
 8003ff8:	00ca      	lsls	r2, r1, #3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	4642      	mov	r2, r8
 8004002:	189b      	adds	r3, r3, r2
 8004004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004008:	464b      	mov	r3, r9
 800400a:	460a      	mov	r2, r1
 800400c:	eb42 0303 	adc.w	r3, r2, r3
 8004010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	67bb      	str	r3, [r7, #120]	; 0x78
 800401e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800402c:	4649      	mov	r1, r9
 800402e:	008b      	lsls	r3, r1, #2
 8004030:	4641      	mov	r1, r8
 8004032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004036:	4641      	mov	r1, r8
 8004038:	008a      	lsls	r2, r1, #2
 800403a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800403e:	f7fc f937 	bl	80002b0 <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4611      	mov	r1, r2
 8004048:	4b38      	ldr	r3, [pc, #224]	; (800412c <UART_SetConfig+0x4e4>)
 800404a:	fba3 2301 	umull	r2, r3, r3, r1
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2264      	movs	r2, #100	; 0x64
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	1acb      	subs	r3, r1, r3
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	3332      	adds	r3, #50	; 0x32
 800405c:	4a33      	ldr	r2, [pc, #204]	; (800412c <UART_SetConfig+0x4e4>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004068:	441c      	add	r4, r3
 800406a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406e:	2200      	movs	r2, #0
 8004070:	673b      	str	r3, [r7, #112]	; 0x70
 8004072:	677a      	str	r2, [r7, #116]	; 0x74
 8004074:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004078:	4642      	mov	r2, r8
 800407a:	464b      	mov	r3, r9
 800407c:	1891      	adds	r1, r2, r2
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	415b      	adcs	r3, r3
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004088:	4641      	mov	r1, r8
 800408a:	1851      	adds	r1, r2, r1
 800408c:	6039      	str	r1, [r7, #0]
 800408e:	4649      	mov	r1, r9
 8004090:	414b      	adcs	r3, r1
 8004092:	607b      	str	r3, [r7, #4]
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040a0:	4659      	mov	r1, fp
 80040a2:	00cb      	lsls	r3, r1, #3
 80040a4:	4651      	mov	r1, sl
 80040a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040aa:	4651      	mov	r1, sl
 80040ac:	00ca      	lsls	r2, r1, #3
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	4642      	mov	r2, r8
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ba:	464b      	mov	r3, r9
 80040bc:	460a      	mov	r2, r1
 80040be:	eb42 0303 	adc.w	r3, r2, r3
 80040c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	663b      	str	r3, [r7, #96]	; 0x60
 80040ce:	667a      	str	r2, [r7, #100]	; 0x64
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040dc:	4649      	mov	r1, r9
 80040de:	008b      	lsls	r3, r1, #2
 80040e0:	4641      	mov	r1, r8
 80040e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e6:	4641      	mov	r1, r8
 80040e8:	008a      	lsls	r2, r1, #2
 80040ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040ee:	f7fc f8df 	bl	80002b0 <__aeabi_uldivmod>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <UART_SetConfig+0x4e4>)
 80040f8:	fba3 1302 	umull	r1, r3, r3, r2
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	2164      	movs	r1, #100	; 0x64
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	3332      	adds	r3, #50	; 0x32
 800410a:	4a08      	ldr	r2, [pc, #32]	; (800412c <UART_SetConfig+0x4e4>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	f003 020f 	and.w	r2, r3, #15
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4422      	add	r2, r4
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004126:	46bd      	mov	sp, r7
 8004128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412c:	51eb851f 	.word	0x51eb851f

08004130 <std>:
 8004130:	2300      	movs	r3, #0
 8004132:	b510      	push	{r4, lr}
 8004134:	4604      	mov	r4, r0
 8004136:	e9c0 3300 	strd	r3, r3, [r0]
 800413a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800413e:	6083      	str	r3, [r0, #8]
 8004140:	8181      	strh	r1, [r0, #12]
 8004142:	6643      	str	r3, [r0, #100]	; 0x64
 8004144:	81c2      	strh	r2, [r0, #14]
 8004146:	6183      	str	r3, [r0, #24]
 8004148:	4619      	mov	r1, r3
 800414a:	2208      	movs	r2, #8
 800414c:	305c      	adds	r0, #92	; 0x5c
 800414e:	f000 f8f4 	bl	800433a <memset>
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <std+0x58>)
 8004154:	6263      	str	r3, [r4, #36]	; 0x24
 8004156:	4b0d      	ldr	r3, [pc, #52]	; (800418c <std+0x5c>)
 8004158:	62a3      	str	r3, [r4, #40]	; 0x28
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <std+0x60>)
 800415c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <std+0x64>)
 8004160:	6323      	str	r3, [r4, #48]	; 0x30
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <std+0x68>)
 8004164:	6224      	str	r4, [r4, #32]
 8004166:	429c      	cmp	r4, r3
 8004168:	d006      	beq.n	8004178 <std+0x48>
 800416a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800416e:	4294      	cmp	r4, r2
 8004170:	d002      	beq.n	8004178 <std+0x48>
 8004172:	33d0      	adds	r3, #208	; 0xd0
 8004174:	429c      	cmp	r4, r3
 8004176:	d105      	bne.n	8004184 <std+0x54>
 8004178:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800417c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004180:	f000 b9f4 	b.w	800456c <__retarget_lock_init_recursive>
 8004184:	bd10      	pop	{r4, pc}
 8004186:	bf00      	nop
 8004188:	080042b5 	.word	0x080042b5
 800418c:	080042d7 	.word	0x080042d7
 8004190:	0800430f 	.word	0x0800430f
 8004194:	08004333 	.word	0x08004333
 8004198:	20000528 	.word	0x20000528

0800419c <stdio_exit_handler>:
 800419c:	4a02      	ldr	r2, [pc, #8]	; (80041a8 <stdio_exit_handler+0xc>)
 800419e:	4903      	ldr	r1, [pc, #12]	; (80041ac <stdio_exit_handler+0x10>)
 80041a0:	4803      	ldr	r0, [pc, #12]	; (80041b0 <stdio_exit_handler+0x14>)
 80041a2:	f000 b869 	b.w	8004278 <_fwalk_sglue>
 80041a6:	bf00      	nop
 80041a8:	200000a4 	.word	0x200000a4
 80041ac:	080048cd 	.word	0x080048cd
 80041b0:	200000b0 	.word	0x200000b0

080041b4 <cleanup_stdio>:
 80041b4:	6841      	ldr	r1, [r0, #4]
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <cleanup_stdio+0x34>)
 80041b8:	4299      	cmp	r1, r3
 80041ba:	b510      	push	{r4, lr}
 80041bc:	4604      	mov	r4, r0
 80041be:	d001      	beq.n	80041c4 <cleanup_stdio+0x10>
 80041c0:	f000 fb84 	bl	80048cc <_fflush_r>
 80041c4:	68a1      	ldr	r1, [r4, #8]
 80041c6:	4b09      	ldr	r3, [pc, #36]	; (80041ec <cleanup_stdio+0x38>)
 80041c8:	4299      	cmp	r1, r3
 80041ca:	d002      	beq.n	80041d2 <cleanup_stdio+0x1e>
 80041cc:	4620      	mov	r0, r4
 80041ce:	f000 fb7d 	bl	80048cc <_fflush_r>
 80041d2:	68e1      	ldr	r1, [r4, #12]
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <cleanup_stdio+0x3c>)
 80041d6:	4299      	cmp	r1, r3
 80041d8:	d004      	beq.n	80041e4 <cleanup_stdio+0x30>
 80041da:	4620      	mov	r0, r4
 80041dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e0:	f000 bb74 	b.w	80048cc <_fflush_r>
 80041e4:	bd10      	pop	{r4, pc}
 80041e6:	bf00      	nop
 80041e8:	20000528 	.word	0x20000528
 80041ec:	20000590 	.word	0x20000590
 80041f0:	200005f8 	.word	0x200005f8

080041f4 <global_stdio_init.part.0>:
 80041f4:	b510      	push	{r4, lr}
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <global_stdio_init.part.0+0x30>)
 80041f8:	4c0b      	ldr	r4, [pc, #44]	; (8004228 <global_stdio_init.part.0+0x34>)
 80041fa:	4a0c      	ldr	r2, [pc, #48]	; (800422c <global_stdio_init.part.0+0x38>)
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	4620      	mov	r0, r4
 8004200:	2200      	movs	r2, #0
 8004202:	2104      	movs	r1, #4
 8004204:	f7ff ff94 	bl	8004130 <std>
 8004208:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800420c:	2201      	movs	r2, #1
 800420e:	2109      	movs	r1, #9
 8004210:	f7ff ff8e 	bl	8004130 <std>
 8004214:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004218:	2202      	movs	r2, #2
 800421a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800421e:	2112      	movs	r1, #18
 8004220:	f7ff bf86 	b.w	8004130 <std>
 8004224:	20000660 	.word	0x20000660
 8004228:	20000528 	.word	0x20000528
 800422c:	0800419d 	.word	0x0800419d

08004230 <__sfp_lock_acquire>:
 8004230:	4801      	ldr	r0, [pc, #4]	; (8004238 <__sfp_lock_acquire+0x8>)
 8004232:	f000 b99c 	b.w	800456e <__retarget_lock_acquire_recursive>
 8004236:	bf00      	nop
 8004238:	20000669 	.word	0x20000669

0800423c <__sfp_lock_release>:
 800423c:	4801      	ldr	r0, [pc, #4]	; (8004244 <__sfp_lock_release+0x8>)
 800423e:	f000 b997 	b.w	8004570 <__retarget_lock_release_recursive>
 8004242:	bf00      	nop
 8004244:	20000669 	.word	0x20000669

08004248 <__sinit>:
 8004248:	b510      	push	{r4, lr}
 800424a:	4604      	mov	r4, r0
 800424c:	f7ff fff0 	bl	8004230 <__sfp_lock_acquire>
 8004250:	6a23      	ldr	r3, [r4, #32]
 8004252:	b11b      	cbz	r3, 800425c <__sinit+0x14>
 8004254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004258:	f7ff bff0 	b.w	800423c <__sfp_lock_release>
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <__sinit+0x28>)
 800425e:	6223      	str	r3, [r4, #32]
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <__sinit+0x2c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f5      	bne.n	8004254 <__sinit+0xc>
 8004268:	f7ff ffc4 	bl	80041f4 <global_stdio_init.part.0>
 800426c:	e7f2      	b.n	8004254 <__sinit+0xc>
 800426e:	bf00      	nop
 8004270:	080041b5 	.word	0x080041b5
 8004274:	20000660 	.word	0x20000660

08004278 <_fwalk_sglue>:
 8004278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800427c:	4607      	mov	r7, r0
 800427e:	4688      	mov	r8, r1
 8004280:	4614      	mov	r4, r2
 8004282:	2600      	movs	r6, #0
 8004284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004288:	f1b9 0901 	subs.w	r9, r9, #1
 800428c:	d505      	bpl.n	800429a <_fwalk_sglue+0x22>
 800428e:	6824      	ldr	r4, [r4, #0]
 8004290:	2c00      	cmp	r4, #0
 8004292:	d1f7      	bne.n	8004284 <_fwalk_sglue+0xc>
 8004294:	4630      	mov	r0, r6
 8004296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800429a:	89ab      	ldrh	r3, [r5, #12]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d907      	bls.n	80042b0 <_fwalk_sglue+0x38>
 80042a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042a4:	3301      	adds	r3, #1
 80042a6:	d003      	beq.n	80042b0 <_fwalk_sglue+0x38>
 80042a8:	4629      	mov	r1, r5
 80042aa:	4638      	mov	r0, r7
 80042ac:	47c0      	blx	r8
 80042ae:	4306      	orrs	r6, r0
 80042b0:	3568      	adds	r5, #104	; 0x68
 80042b2:	e7e9      	b.n	8004288 <_fwalk_sglue+0x10>

080042b4 <__sread>:
 80042b4:	b510      	push	{r4, lr}
 80042b6:	460c      	mov	r4, r1
 80042b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042bc:	f000 f908 	bl	80044d0 <_read_r>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	bfab      	itete	ge
 80042c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042c6:	89a3      	ldrhlt	r3, [r4, #12]
 80042c8:	181b      	addge	r3, r3, r0
 80042ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042ce:	bfac      	ite	ge
 80042d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80042d2:	81a3      	strhlt	r3, [r4, #12]
 80042d4:	bd10      	pop	{r4, pc}

080042d6 <__swrite>:
 80042d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042da:	461f      	mov	r7, r3
 80042dc:	898b      	ldrh	r3, [r1, #12]
 80042de:	05db      	lsls	r3, r3, #23
 80042e0:	4605      	mov	r5, r0
 80042e2:	460c      	mov	r4, r1
 80042e4:	4616      	mov	r6, r2
 80042e6:	d505      	bpl.n	80042f4 <__swrite+0x1e>
 80042e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ec:	2302      	movs	r3, #2
 80042ee:	2200      	movs	r2, #0
 80042f0:	f000 f8dc 	bl	80044ac <_lseek_r>
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042fe:	81a3      	strh	r3, [r4, #12]
 8004300:	4632      	mov	r2, r6
 8004302:	463b      	mov	r3, r7
 8004304:	4628      	mov	r0, r5
 8004306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800430a:	f000 b8f3 	b.w	80044f4 <_write_r>

0800430e <__sseek>:
 800430e:	b510      	push	{r4, lr}
 8004310:	460c      	mov	r4, r1
 8004312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004316:	f000 f8c9 	bl	80044ac <_lseek_r>
 800431a:	1c43      	adds	r3, r0, #1
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	bf15      	itete	ne
 8004320:	6560      	strne	r0, [r4, #84]	; 0x54
 8004322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800432a:	81a3      	strheq	r3, [r4, #12]
 800432c:	bf18      	it	ne
 800432e:	81a3      	strhne	r3, [r4, #12]
 8004330:	bd10      	pop	{r4, pc}

08004332 <__sclose>:
 8004332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004336:	f000 b8a9 	b.w	800448c <_close_r>

0800433a <memset>:
 800433a:	4402      	add	r2, r0
 800433c:	4603      	mov	r3, r0
 800433e:	4293      	cmp	r3, r2
 8004340:	d100      	bne.n	8004344 <memset+0xa>
 8004342:	4770      	bx	lr
 8004344:	f803 1b01 	strb.w	r1, [r3], #1
 8004348:	e7f9      	b.n	800433e <memset+0x4>

0800434a <strcat>:
 800434a:	b510      	push	{r4, lr}
 800434c:	4602      	mov	r2, r0
 800434e:	7814      	ldrb	r4, [r2, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	3201      	adds	r2, #1
 8004354:	2c00      	cmp	r4, #0
 8004356:	d1fa      	bne.n	800434e <strcat+0x4>
 8004358:	3b01      	subs	r3, #1
 800435a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800435e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004362:	2a00      	cmp	r2, #0
 8004364:	d1f9      	bne.n	800435a <strcat+0x10>
 8004366:	bd10      	pop	{r4, pc}

08004368 <strchr>:
 8004368:	b2c9      	uxtb	r1, r1
 800436a:	4603      	mov	r3, r0
 800436c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004370:	b11a      	cbz	r2, 800437a <strchr+0x12>
 8004372:	428a      	cmp	r2, r1
 8004374:	d1f9      	bne.n	800436a <strchr+0x2>
 8004376:	4618      	mov	r0, r3
 8004378:	4770      	bx	lr
 800437a:	2900      	cmp	r1, #0
 800437c:	bf18      	it	ne
 800437e:	2300      	movne	r3, #0
 8004380:	e7f9      	b.n	8004376 <strchr+0xe>

08004382 <strncmp>:
 8004382:	b510      	push	{r4, lr}
 8004384:	b16a      	cbz	r2, 80043a2 <strncmp+0x20>
 8004386:	3901      	subs	r1, #1
 8004388:	1884      	adds	r4, r0, r2
 800438a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800438e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004392:	429a      	cmp	r2, r3
 8004394:	d103      	bne.n	800439e <strncmp+0x1c>
 8004396:	42a0      	cmp	r0, r4
 8004398:	d001      	beq.n	800439e <strncmp+0x1c>
 800439a:	2a00      	cmp	r2, #0
 800439c:	d1f5      	bne.n	800438a <strncmp+0x8>
 800439e:	1ad0      	subs	r0, r2, r3
 80043a0:	bd10      	pop	{r4, pc}
 80043a2:	4610      	mov	r0, r2
 80043a4:	e7fc      	b.n	80043a0 <strncmp+0x1e>
	...

080043a8 <strtok>:
 80043a8:	4b16      	ldr	r3, [pc, #88]	; (8004404 <strtok+0x5c>)
 80043aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043ac:	681e      	ldr	r6, [r3, #0]
 80043ae:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80043b0:	4605      	mov	r5, r0
 80043b2:	b9fc      	cbnz	r4, 80043f4 <strtok+0x4c>
 80043b4:	2050      	movs	r0, #80	; 0x50
 80043b6:	9101      	str	r1, [sp, #4]
 80043b8:	f000 f94e 	bl	8004658 <malloc>
 80043bc:	9901      	ldr	r1, [sp, #4]
 80043be:	6470      	str	r0, [r6, #68]	; 0x44
 80043c0:	4602      	mov	r2, r0
 80043c2:	b920      	cbnz	r0, 80043ce <strtok+0x26>
 80043c4:	4b10      	ldr	r3, [pc, #64]	; (8004408 <strtok+0x60>)
 80043c6:	4811      	ldr	r0, [pc, #68]	; (800440c <strtok+0x64>)
 80043c8:	215b      	movs	r1, #91	; 0x5b
 80043ca:	f000 f8db 	bl	8004584 <__assert_func>
 80043ce:	e9c0 4400 	strd	r4, r4, [r0]
 80043d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80043d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80043da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80043de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80043e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80043e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80043ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80043ee:	6184      	str	r4, [r0, #24]
 80043f0:	7704      	strb	r4, [r0, #28]
 80043f2:	6244      	str	r4, [r0, #36]	; 0x24
 80043f4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80043f6:	2301      	movs	r3, #1
 80043f8:	4628      	mov	r0, r5
 80043fa:	b002      	add	sp, #8
 80043fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004400:	f000 b806 	b.w	8004410 <__strtok_r>
 8004404:	200000fc 	.word	0x200000fc
 8004408:	080053a8 	.word	0x080053a8
 800440c:	080053bf 	.word	0x080053bf

08004410 <__strtok_r>:
 8004410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004412:	b908      	cbnz	r0, 8004418 <__strtok_r+0x8>
 8004414:	6810      	ldr	r0, [r2, #0]
 8004416:	b188      	cbz	r0, 800443c <__strtok_r+0x2c>
 8004418:	4604      	mov	r4, r0
 800441a:	4620      	mov	r0, r4
 800441c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004420:	460f      	mov	r7, r1
 8004422:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004426:	b91e      	cbnz	r6, 8004430 <__strtok_r+0x20>
 8004428:	b965      	cbnz	r5, 8004444 <__strtok_r+0x34>
 800442a:	6015      	str	r5, [r2, #0]
 800442c:	4628      	mov	r0, r5
 800442e:	e005      	b.n	800443c <__strtok_r+0x2c>
 8004430:	42b5      	cmp	r5, r6
 8004432:	d1f6      	bne.n	8004422 <__strtok_r+0x12>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <__strtok_r+0xa>
 8004438:	6014      	str	r4, [r2, #0]
 800443a:	7003      	strb	r3, [r0, #0]
 800443c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443e:	461c      	mov	r4, r3
 8004440:	e00c      	b.n	800445c <__strtok_r+0x4c>
 8004442:	b915      	cbnz	r5, 800444a <__strtok_r+0x3a>
 8004444:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004448:	460e      	mov	r6, r1
 800444a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800444e:	42ab      	cmp	r3, r5
 8004450:	d1f7      	bne.n	8004442 <__strtok_r+0x32>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f3      	beq.n	800443e <__strtok_r+0x2e>
 8004456:	2300      	movs	r3, #0
 8004458:	f804 3c01 	strb.w	r3, [r4, #-1]
 800445c:	6014      	str	r4, [r2, #0]
 800445e:	e7ed      	b.n	800443c <__strtok_r+0x2c>

08004460 <strstr>:
 8004460:	780a      	ldrb	r2, [r1, #0]
 8004462:	b570      	push	{r4, r5, r6, lr}
 8004464:	b96a      	cbnz	r2, 8004482 <strstr+0x22>
 8004466:	bd70      	pop	{r4, r5, r6, pc}
 8004468:	429a      	cmp	r2, r3
 800446a:	d109      	bne.n	8004480 <strstr+0x20>
 800446c:	460c      	mov	r4, r1
 800446e:	4605      	mov	r5, r0
 8004470:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f6      	beq.n	8004466 <strstr+0x6>
 8004478:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800447c:	429e      	cmp	r6, r3
 800447e:	d0f7      	beq.n	8004470 <strstr+0x10>
 8004480:	3001      	adds	r0, #1
 8004482:	7803      	ldrb	r3, [r0, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1ef      	bne.n	8004468 <strstr+0x8>
 8004488:	4618      	mov	r0, r3
 800448a:	e7ec      	b.n	8004466 <strstr+0x6>

0800448c <_close_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d06      	ldr	r5, [pc, #24]	; (80044a8 <_close_r+0x1c>)
 8004490:	2300      	movs	r3, #0
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	f7fd fc45 	bl	8001d26 <_close>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_close_r+0x1a>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_close_r+0x1a>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	20000664 	.word	0x20000664

080044ac <_lseek_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d07      	ldr	r5, [pc, #28]	; (80044cc <_lseek_r+0x20>)
 80044b0:	4604      	mov	r4, r0
 80044b2:	4608      	mov	r0, r1
 80044b4:	4611      	mov	r1, r2
 80044b6:	2200      	movs	r2, #0
 80044b8:	602a      	str	r2, [r5, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7fd fc5a 	bl	8001d74 <_lseek>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d102      	bne.n	80044ca <_lseek_r+0x1e>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	b103      	cbz	r3, 80044ca <_lseek_r+0x1e>
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	20000664 	.word	0x20000664

080044d0 <_read_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4d07      	ldr	r5, [pc, #28]	; (80044f0 <_read_r+0x20>)
 80044d4:	4604      	mov	r4, r0
 80044d6:	4608      	mov	r0, r1
 80044d8:	4611      	mov	r1, r2
 80044da:	2200      	movs	r2, #0
 80044dc:	602a      	str	r2, [r5, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	f7fd fbe8 	bl	8001cb4 <_read>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	d102      	bne.n	80044ee <_read_r+0x1e>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	b103      	cbz	r3, 80044ee <_read_r+0x1e>
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	20000664 	.word	0x20000664

080044f4 <_write_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	4d07      	ldr	r5, [pc, #28]	; (8004514 <_write_r+0x20>)
 80044f8:	4604      	mov	r4, r0
 80044fa:	4608      	mov	r0, r1
 80044fc:	4611      	mov	r1, r2
 80044fe:	2200      	movs	r2, #0
 8004500:	602a      	str	r2, [r5, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	f7fd fbf3 	bl	8001cee <_write>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_write_r+0x1e>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	b103      	cbz	r3, 8004512 <_write_r+0x1e>
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	20000664 	.word	0x20000664

08004518 <__errno>:
 8004518:	4b01      	ldr	r3, [pc, #4]	; (8004520 <__errno+0x8>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	200000fc 	.word	0x200000fc

08004524 <__libc_init_array>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	4d0d      	ldr	r5, [pc, #52]	; (800455c <__libc_init_array+0x38>)
 8004528:	4c0d      	ldr	r4, [pc, #52]	; (8004560 <__libc_init_array+0x3c>)
 800452a:	1b64      	subs	r4, r4, r5
 800452c:	10a4      	asrs	r4, r4, #2
 800452e:	2600      	movs	r6, #0
 8004530:	42a6      	cmp	r6, r4
 8004532:	d109      	bne.n	8004548 <__libc_init_array+0x24>
 8004534:	4d0b      	ldr	r5, [pc, #44]	; (8004564 <__libc_init_array+0x40>)
 8004536:	4c0c      	ldr	r4, [pc, #48]	; (8004568 <__libc_init_array+0x44>)
 8004538:	f000 fe4a 	bl	80051d0 <_init>
 800453c:	1b64      	subs	r4, r4, r5
 800453e:	10a4      	asrs	r4, r4, #2
 8004540:	2600      	movs	r6, #0
 8004542:	42a6      	cmp	r6, r4
 8004544:	d105      	bne.n	8004552 <__libc_init_array+0x2e>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	f855 3b04 	ldr.w	r3, [r5], #4
 800454c:	4798      	blx	r3
 800454e:	3601      	adds	r6, #1
 8004550:	e7ee      	b.n	8004530 <__libc_init_array+0xc>
 8004552:	f855 3b04 	ldr.w	r3, [r5], #4
 8004556:	4798      	blx	r3
 8004558:	3601      	adds	r6, #1
 800455a:	e7f2      	b.n	8004542 <__libc_init_array+0x1e>
 800455c:	08005490 	.word	0x08005490
 8004560:	08005490 	.word	0x08005490
 8004564:	08005490 	.word	0x08005490
 8004568:	08005494 	.word	0x08005494

0800456c <__retarget_lock_init_recursive>:
 800456c:	4770      	bx	lr

0800456e <__retarget_lock_acquire_recursive>:
 800456e:	4770      	bx	lr

08004570 <__retarget_lock_release_recursive>:
 8004570:	4770      	bx	lr

08004572 <strcpy>:
 8004572:	4603      	mov	r3, r0
 8004574:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004578:	f803 2b01 	strb.w	r2, [r3], #1
 800457c:	2a00      	cmp	r2, #0
 800457e:	d1f9      	bne.n	8004574 <strcpy+0x2>
 8004580:	4770      	bx	lr
	...

08004584 <__assert_func>:
 8004584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004586:	4614      	mov	r4, r2
 8004588:	461a      	mov	r2, r3
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <__assert_func+0x2c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4605      	mov	r5, r0
 8004590:	68d8      	ldr	r0, [r3, #12]
 8004592:	b14c      	cbz	r4, 80045a8 <__assert_func+0x24>
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <__assert_func+0x30>)
 8004596:	9100      	str	r1, [sp, #0]
 8004598:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800459c:	4906      	ldr	r1, [pc, #24]	; (80045b8 <__assert_func+0x34>)
 800459e:	462b      	mov	r3, r5
 80045a0:	f000 f9bc 	bl	800491c <fiprintf>
 80045a4:	f000 f9dc 	bl	8004960 <abort>
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <__assert_func+0x38>)
 80045aa:	461c      	mov	r4, r3
 80045ac:	e7f3      	b.n	8004596 <__assert_func+0x12>
 80045ae:	bf00      	nop
 80045b0:	200000fc 	.word	0x200000fc
 80045b4:	08005419 	.word	0x08005419
 80045b8:	08005426 	.word	0x08005426
 80045bc:	08005454 	.word	0x08005454

080045c0 <_free_r>:
 80045c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045c2:	2900      	cmp	r1, #0
 80045c4:	d044      	beq.n	8004650 <_free_r+0x90>
 80045c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ca:	9001      	str	r0, [sp, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f1a1 0404 	sub.w	r4, r1, #4
 80045d2:	bfb8      	it	lt
 80045d4:	18e4      	addlt	r4, r4, r3
 80045d6:	f000 f8e7 	bl	80047a8 <__malloc_lock>
 80045da:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <_free_r+0x94>)
 80045dc:	9801      	ldr	r0, [sp, #4]
 80045de:	6813      	ldr	r3, [r2, #0]
 80045e0:	b933      	cbnz	r3, 80045f0 <_free_r+0x30>
 80045e2:	6063      	str	r3, [r4, #4]
 80045e4:	6014      	str	r4, [r2, #0]
 80045e6:	b003      	add	sp, #12
 80045e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045ec:	f000 b8e2 	b.w	80047b4 <__malloc_unlock>
 80045f0:	42a3      	cmp	r3, r4
 80045f2:	d908      	bls.n	8004606 <_free_r+0x46>
 80045f4:	6825      	ldr	r5, [r4, #0]
 80045f6:	1961      	adds	r1, r4, r5
 80045f8:	428b      	cmp	r3, r1
 80045fa:	bf01      	itttt	eq
 80045fc:	6819      	ldreq	r1, [r3, #0]
 80045fe:	685b      	ldreq	r3, [r3, #4]
 8004600:	1949      	addeq	r1, r1, r5
 8004602:	6021      	streq	r1, [r4, #0]
 8004604:	e7ed      	b.n	80045e2 <_free_r+0x22>
 8004606:	461a      	mov	r2, r3
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	b10b      	cbz	r3, 8004610 <_free_r+0x50>
 800460c:	42a3      	cmp	r3, r4
 800460e:	d9fa      	bls.n	8004606 <_free_r+0x46>
 8004610:	6811      	ldr	r1, [r2, #0]
 8004612:	1855      	adds	r5, r2, r1
 8004614:	42a5      	cmp	r5, r4
 8004616:	d10b      	bne.n	8004630 <_free_r+0x70>
 8004618:	6824      	ldr	r4, [r4, #0]
 800461a:	4421      	add	r1, r4
 800461c:	1854      	adds	r4, r2, r1
 800461e:	42a3      	cmp	r3, r4
 8004620:	6011      	str	r1, [r2, #0]
 8004622:	d1e0      	bne.n	80045e6 <_free_r+0x26>
 8004624:	681c      	ldr	r4, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	6053      	str	r3, [r2, #4]
 800462a:	440c      	add	r4, r1
 800462c:	6014      	str	r4, [r2, #0]
 800462e:	e7da      	b.n	80045e6 <_free_r+0x26>
 8004630:	d902      	bls.n	8004638 <_free_r+0x78>
 8004632:	230c      	movs	r3, #12
 8004634:	6003      	str	r3, [r0, #0]
 8004636:	e7d6      	b.n	80045e6 <_free_r+0x26>
 8004638:	6825      	ldr	r5, [r4, #0]
 800463a:	1961      	adds	r1, r4, r5
 800463c:	428b      	cmp	r3, r1
 800463e:	bf04      	itt	eq
 8004640:	6819      	ldreq	r1, [r3, #0]
 8004642:	685b      	ldreq	r3, [r3, #4]
 8004644:	6063      	str	r3, [r4, #4]
 8004646:	bf04      	itt	eq
 8004648:	1949      	addeq	r1, r1, r5
 800464a:	6021      	streq	r1, [r4, #0]
 800464c:	6054      	str	r4, [r2, #4]
 800464e:	e7ca      	b.n	80045e6 <_free_r+0x26>
 8004650:	b003      	add	sp, #12
 8004652:	bd30      	pop	{r4, r5, pc}
 8004654:	2000066c 	.word	0x2000066c

08004658 <malloc>:
 8004658:	4b02      	ldr	r3, [pc, #8]	; (8004664 <malloc+0xc>)
 800465a:	4601      	mov	r1, r0
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	f000 b823 	b.w	80046a8 <_malloc_r>
 8004662:	bf00      	nop
 8004664:	200000fc 	.word	0x200000fc

08004668 <sbrk_aligned>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4e0e      	ldr	r6, [pc, #56]	; (80046a4 <sbrk_aligned+0x3c>)
 800466c:	460c      	mov	r4, r1
 800466e:	6831      	ldr	r1, [r6, #0]
 8004670:	4605      	mov	r5, r0
 8004672:	b911      	cbnz	r1, 800467a <sbrk_aligned+0x12>
 8004674:	f000 f964 	bl	8004940 <_sbrk_r>
 8004678:	6030      	str	r0, [r6, #0]
 800467a:	4621      	mov	r1, r4
 800467c:	4628      	mov	r0, r5
 800467e:	f000 f95f 	bl	8004940 <_sbrk_r>
 8004682:	1c43      	adds	r3, r0, #1
 8004684:	d00a      	beq.n	800469c <sbrk_aligned+0x34>
 8004686:	1cc4      	adds	r4, r0, #3
 8004688:	f024 0403 	bic.w	r4, r4, #3
 800468c:	42a0      	cmp	r0, r4
 800468e:	d007      	beq.n	80046a0 <sbrk_aligned+0x38>
 8004690:	1a21      	subs	r1, r4, r0
 8004692:	4628      	mov	r0, r5
 8004694:	f000 f954 	bl	8004940 <_sbrk_r>
 8004698:	3001      	adds	r0, #1
 800469a:	d101      	bne.n	80046a0 <sbrk_aligned+0x38>
 800469c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046a0:	4620      	mov	r0, r4
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	20000670 	.word	0x20000670

080046a8 <_malloc_r>:
 80046a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ac:	1ccd      	adds	r5, r1, #3
 80046ae:	f025 0503 	bic.w	r5, r5, #3
 80046b2:	3508      	adds	r5, #8
 80046b4:	2d0c      	cmp	r5, #12
 80046b6:	bf38      	it	cc
 80046b8:	250c      	movcc	r5, #12
 80046ba:	2d00      	cmp	r5, #0
 80046bc:	4607      	mov	r7, r0
 80046be:	db01      	blt.n	80046c4 <_malloc_r+0x1c>
 80046c0:	42a9      	cmp	r1, r5
 80046c2:	d905      	bls.n	80046d0 <_malloc_r+0x28>
 80046c4:	230c      	movs	r3, #12
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	2600      	movs	r6, #0
 80046ca:	4630      	mov	r0, r6
 80046cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047a4 <_malloc_r+0xfc>
 80046d4:	f000 f868 	bl	80047a8 <__malloc_lock>
 80046d8:	f8d8 3000 	ldr.w	r3, [r8]
 80046dc:	461c      	mov	r4, r3
 80046de:	bb5c      	cbnz	r4, 8004738 <_malloc_r+0x90>
 80046e0:	4629      	mov	r1, r5
 80046e2:	4638      	mov	r0, r7
 80046e4:	f7ff ffc0 	bl	8004668 <sbrk_aligned>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	4604      	mov	r4, r0
 80046ec:	d155      	bne.n	800479a <_malloc_r+0xf2>
 80046ee:	f8d8 4000 	ldr.w	r4, [r8]
 80046f2:	4626      	mov	r6, r4
 80046f4:	2e00      	cmp	r6, #0
 80046f6:	d145      	bne.n	8004784 <_malloc_r+0xdc>
 80046f8:	2c00      	cmp	r4, #0
 80046fa:	d048      	beq.n	800478e <_malloc_r+0xe6>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	4631      	mov	r1, r6
 8004700:	4638      	mov	r0, r7
 8004702:	eb04 0903 	add.w	r9, r4, r3
 8004706:	f000 f91b 	bl	8004940 <_sbrk_r>
 800470a:	4581      	cmp	r9, r0
 800470c:	d13f      	bne.n	800478e <_malloc_r+0xe6>
 800470e:	6821      	ldr	r1, [r4, #0]
 8004710:	1a6d      	subs	r5, r5, r1
 8004712:	4629      	mov	r1, r5
 8004714:	4638      	mov	r0, r7
 8004716:	f7ff ffa7 	bl	8004668 <sbrk_aligned>
 800471a:	3001      	adds	r0, #1
 800471c:	d037      	beq.n	800478e <_malloc_r+0xe6>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	442b      	add	r3, r5
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	f8d8 3000 	ldr.w	r3, [r8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d038      	beq.n	800479e <_malloc_r+0xf6>
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	42a2      	cmp	r2, r4
 8004730:	d12b      	bne.n	800478a <_malloc_r+0xe2>
 8004732:	2200      	movs	r2, #0
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	e00f      	b.n	8004758 <_malloc_r+0xb0>
 8004738:	6822      	ldr	r2, [r4, #0]
 800473a:	1b52      	subs	r2, r2, r5
 800473c:	d41f      	bmi.n	800477e <_malloc_r+0xd6>
 800473e:	2a0b      	cmp	r2, #11
 8004740:	d917      	bls.n	8004772 <_malloc_r+0xca>
 8004742:	1961      	adds	r1, r4, r5
 8004744:	42a3      	cmp	r3, r4
 8004746:	6025      	str	r5, [r4, #0]
 8004748:	bf18      	it	ne
 800474a:	6059      	strne	r1, [r3, #4]
 800474c:	6863      	ldr	r3, [r4, #4]
 800474e:	bf08      	it	eq
 8004750:	f8c8 1000 	streq.w	r1, [r8]
 8004754:	5162      	str	r2, [r4, r5]
 8004756:	604b      	str	r3, [r1, #4]
 8004758:	4638      	mov	r0, r7
 800475a:	f104 060b 	add.w	r6, r4, #11
 800475e:	f000 f829 	bl	80047b4 <__malloc_unlock>
 8004762:	f026 0607 	bic.w	r6, r6, #7
 8004766:	1d23      	adds	r3, r4, #4
 8004768:	1af2      	subs	r2, r6, r3
 800476a:	d0ae      	beq.n	80046ca <_malloc_r+0x22>
 800476c:	1b9b      	subs	r3, r3, r6
 800476e:	50a3      	str	r3, [r4, r2]
 8004770:	e7ab      	b.n	80046ca <_malloc_r+0x22>
 8004772:	42a3      	cmp	r3, r4
 8004774:	6862      	ldr	r2, [r4, #4]
 8004776:	d1dd      	bne.n	8004734 <_malloc_r+0x8c>
 8004778:	f8c8 2000 	str.w	r2, [r8]
 800477c:	e7ec      	b.n	8004758 <_malloc_r+0xb0>
 800477e:	4623      	mov	r3, r4
 8004780:	6864      	ldr	r4, [r4, #4]
 8004782:	e7ac      	b.n	80046de <_malloc_r+0x36>
 8004784:	4634      	mov	r4, r6
 8004786:	6876      	ldr	r6, [r6, #4]
 8004788:	e7b4      	b.n	80046f4 <_malloc_r+0x4c>
 800478a:	4613      	mov	r3, r2
 800478c:	e7cc      	b.n	8004728 <_malloc_r+0x80>
 800478e:	230c      	movs	r3, #12
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	4638      	mov	r0, r7
 8004794:	f000 f80e 	bl	80047b4 <__malloc_unlock>
 8004798:	e797      	b.n	80046ca <_malloc_r+0x22>
 800479a:	6025      	str	r5, [r4, #0]
 800479c:	e7dc      	b.n	8004758 <_malloc_r+0xb0>
 800479e:	605b      	str	r3, [r3, #4]
 80047a0:	deff      	udf	#255	; 0xff
 80047a2:	bf00      	nop
 80047a4:	2000066c 	.word	0x2000066c

080047a8 <__malloc_lock>:
 80047a8:	4801      	ldr	r0, [pc, #4]	; (80047b0 <__malloc_lock+0x8>)
 80047aa:	f7ff bee0 	b.w	800456e <__retarget_lock_acquire_recursive>
 80047ae:	bf00      	nop
 80047b0:	20000668 	.word	0x20000668

080047b4 <__malloc_unlock>:
 80047b4:	4801      	ldr	r0, [pc, #4]	; (80047bc <__malloc_unlock+0x8>)
 80047b6:	f7ff bedb 	b.w	8004570 <__retarget_lock_release_recursive>
 80047ba:	bf00      	nop
 80047bc:	20000668 	.word	0x20000668

080047c0 <__sflush_r>:
 80047c0:	898a      	ldrh	r2, [r1, #12]
 80047c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c6:	4605      	mov	r5, r0
 80047c8:	0710      	lsls	r0, r2, #28
 80047ca:	460c      	mov	r4, r1
 80047cc:	d458      	bmi.n	8004880 <__sflush_r+0xc0>
 80047ce:	684b      	ldr	r3, [r1, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	dc05      	bgt.n	80047e0 <__sflush_r+0x20>
 80047d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	dc02      	bgt.n	80047e0 <__sflush_r+0x20>
 80047da:	2000      	movs	r0, #0
 80047dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047e2:	2e00      	cmp	r6, #0
 80047e4:	d0f9      	beq.n	80047da <__sflush_r+0x1a>
 80047e6:	2300      	movs	r3, #0
 80047e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047ec:	682f      	ldr	r7, [r5, #0]
 80047ee:	6a21      	ldr	r1, [r4, #32]
 80047f0:	602b      	str	r3, [r5, #0]
 80047f2:	d032      	beq.n	800485a <__sflush_r+0x9a>
 80047f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	075a      	lsls	r2, r3, #29
 80047fa:	d505      	bpl.n	8004808 <__sflush_r+0x48>
 80047fc:	6863      	ldr	r3, [r4, #4]
 80047fe:	1ac0      	subs	r0, r0, r3
 8004800:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004802:	b10b      	cbz	r3, 8004808 <__sflush_r+0x48>
 8004804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004806:	1ac0      	subs	r0, r0, r3
 8004808:	2300      	movs	r3, #0
 800480a:	4602      	mov	r2, r0
 800480c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800480e:	6a21      	ldr	r1, [r4, #32]
 8004810:	4628      	mov	r0, r5
 8004812:	47b0      	blx	r6
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	d106      	bne.n	8004828 <__sflush_r+0x68>
 800481a:	6829      	ldr	r1, [r5, #0]
 800481c:	291d      	cmp	r1, #29
 800481e:	d82b      	bhi.n	8004878 <__sflush_r+0xb8>
 8004820:	4a29      	ldr	r2, [pc, #164]	; (80048c8 <__sflush_r+0x108>)
 8004822:	410a      	asrs	r2, r1
 8004824:	07d6      	lsls	r6, r2, #31
 8004826:	d427      	bmi.n	8004878 <__sflush_r+0xb8>
 8004828:	2200      	movs	r2, #0
 800482a:	6062      	str	r2, [r4, #4]
 800482c:	04d9      	lsls	r1, r3, #19
 800482e:	6922      	ldr	r2, [r4, #16]
 8004830:	6022      	str	r2, [r4, #0]
 8004832:	d504      	bpl.n	800483e <__sflush_r+0x7e>
 8004834:	1c42      	adds	r2, r0, #1
 8004836:	d101      	bne.n	800483c <__sflush_r+0x7c>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b903      	cbnz	r3, 800483e <__sflush_r+0x7e>
 800483c:	6560      	str	r0, [r4, #84]	; 0x54
 800483e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004840:	602f      	str	r7, [r5, #0]
 8004842:	2900      	cmp	r1, #0
 8004844:	d0c9      	beq.n	80047da <__sflush_r+0x1a>
 8004846:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800484a:	4299      	cmp	r1, r3
 800484c:	d002      	beq.n	8004854 <__sflush_r+0x94>
 800484e:	4628      	mov	r0, r5
 8004850:	f7ff feb6 	bl	80045c0 <_free_r>
 8004854:	2000      	movs	r0, #0
 8004856:	6360      	str	r0, [r4, #52]	; 0x34
 8004858:	e7c0      	b.n	80047dc <__sflush_r+0x1c>
 800485a:	2301      	movs	r3, #1
 800485c:	4628      	mov	r0, r5
 800485e:	47b0      	blx	r6
 8004860:	1c41      	adds	r1, r0, #1
 8004862:	d1c8      	bne.n	80047f6 <__sflush_r+0x36>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0c5      	beq.n	80047f6 <__sflush_r+0x36>
 800486a:	2b1d      	cmp	r3, #29
 800486c:	d001      	beq.n	8004872 <__sflush_r+0xb2>
 800486e:	2b16      	cmp	r3, #22
 8004870:	d101      	bne.n	8004876 <__sflush_r+0xb6>
 8004872:	602f      	str	r7, [r5, #0]
 8004874:	e7b1      	b.n	80047da <__sflush_r+0x1a>
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800487c:	81a3      	strh	r3, [r4, #12]
 800487e:	e7ad      	b.n	80047dc <__sflush_r+0x1c>
 8004880:	690f      	ldr	r7, [r1, #16]
 8004882:	2f00      	cmp	r7, #0
 8004884:	d0a9      	beq.n	80047da <__sflush_r+0x1a>
 8004886:	0793      	lsls	r3, r2, #30
 8004888:	680e      	ldr	r6, [r1, #0]
 800488a:	bf08      	it	eq
 800488c:	694b      	ldreq	r3, [r1, #20]
 800488e:	600f      	str	r7, [r1, #0]
 8004890:	bf18      	it	ne
 8004892:	2300      	movne	r3, #0
 8004894:	eba6 0807 	sub.w	r8, r6, r7
 8004898:	608b      	str	r3, [r1, #8]
 800489a:	f1b8 0f00 	cmp.w	r8, #0
 800489e:	dd9c      	ble.n	80047da <__sflush_r+0x1a>
 80048a0:	6a21      	ldr	r1, [r4, #32]
 80048a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048a4:	4643      	mov	r3, r8
 80048a6:	463a      	mov	r2, r7
 80048a8:	4628      	mov	r0, r5
 80048aa:	47b0      	blx	r6
 80048ac:	2800      	cmp	r0, #0
 80048ae:	dc06      	bgt.n	80048be <__sflush_r+0xfe>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048bc:	e78e      	b.n	80047dc <__sflush_r+0x1c>
 80048be:	4407      	add	r7, r0
 80048c0:	eba8 0800 	sub.w	r8, r8, r0
 80048c4:	e7e9      	b.n	800489a <__sflush_r+0xda>
 80048c6:	bf00      	nop
 80048c8:	dfbffffe 	.word	0xdfbffffe

080048cc <_fflush_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	690b      	ldr	r3, [r1, #16]
 80048d0:	4605      	mov	r5, r0
 80048d2:	460c      	mov	r4, r1
 80048d4:	b913      	cbnz	r3, 80048dc <_fflush_r+0x10>
 80048d6:	2500      	movs	r5, #0
 80048d8:	4628      	mov	r0, r5
 80048da:	bd38      	pop	{r3, r4, r5, pc}
 80048dc:	b118      	cbz	r0, 80048e6 <_fflush_r+0x1a>
 80048de:	6a03      	ldr	r3, [r0, #32]
 80048e0:	b90b      	cbnz	r3, 80048e6 <_fflush_r+0x1a>
 80048e2:	f7ff fcb1 	bl	8004248 <__sinit>
 80048e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f3      	beq.n	80048d6 <_fflush_r+0xa>
 80048ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048f0:	07d0      	lsls	r0, r2, #31
 80048f2:	d404      	bmi.n	80048fe <_fflush_r+0x32>
 80048f4:	0599      	lsls	r1, r3, #22
 80048f6:	d402      	bmi.n	80048fe <_fflush_r+0x32>
 80048f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048fa:	f7ff fe38 	bl	800456e <__retarget_lock_acquire_recursive>
 80048fe:	4628      	mov	r0, r5
 8004900:	4621      	mov	r1, r4
 8004902:	f7ff ff5d 	bl	80047c0 <__sflush_r>
 8004906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004908:	07da      	lsls	r2, r3, #31
 800490a:	4605      	mov	r5, r0
 800490c:	d4e4      	bmi.n	80048d8 <_fflush_r+0xc>
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	059b      	lsls	r3, r3, #22
 8004912:	d4e1      	bmi.n	80048d8 <_fflush_r+0xc>
 8004914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004916:	f7ff fe2b 	bl	8004570 <__retarget_lock_release_recursive>
 800491a:	e7dd      	b.n	80048d8 <_fflush_r+0xc>

0800491c <fiprintf>:
 800491c:	b40e      	push	{r1, r2, r3}
 800491e:	b503      	push	{r0, r1, lr}
 8004920:	4601      	mov	r1, r0
 8004922:	ab03      	add	r3, sp, #12
 8004924:	4805      	ldr	r0, [pc, #20]	; (800493c <fiprintf+0x20>)
 8004926:	f853 2b04 	ldr.w	r2, [r3], #4
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	f000 f847 	bl	80049c0 <_vfiprintf_r>
 8004932:	b002      	add	sp, #8
 8004934:	f85d eb04 	ldr.w	lr, [sp], #4
 8004938:	b003      	add	sp, #12
 800493a:	4770      	bx	lr
 800493c:	200000fc 	.word	0x200000fc

08004940 <_sbrk_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4d06      	ldr	r5, [pc, #24]	; (800495c <_sbrk_r+0x1c>)
 8004944:	2300      	movs	r3, #0
 8004946:	4604      	mov	r4, r0
 8004948:	4608      	mov	r0, r1
 800494a:	602b      	str	r3, [r5, #0]
 800494c:	f7fd fa20 	bl	8001d90 <_sbrk>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d102      	bne.n	800495a <_sbrk_r+0x1a>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	b103      	cbz	r3, 800495a <_sbrk_r+0x1a>
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	20000664 	.word	0x20000664

08004960 <abort>:
 8004960:	b508      	push	{r3, lr}
 8004962:	2006      	movs	r0, #6
 8004964:	f000 fb94 	bl	8005090 <raise>
 8004968:	2001      	movs	r0, #1
 800496a:	f7fd f999 	bl	8001ca0 <_exit>

0800496e <__sfputc_r>:
 800496e:	6893      	ldr	r3, [r2, #8]
 8004970:	3b01      	subs	r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	b410      	push	{r4}
 8004976:	6093      	str	r3, [r2, #8]
 8004978:	da08      	bge.n	800498c <__sfputc_r+0x1e>
 800497a:	6994      	ldr	r4, [r2, #24]
 800497c:	42a3      	cmp	r3, r4
 800497e:	db01      	blt.n	8004984 <__sfputc_r+0x16>
 8004980:	290a      	cmp	r1, #10
 8004982:	d103      	bne.n	800498c <__sfputc_r+0x1e>
 8004984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004988:	f000 bac4 	b.w	8004f14 <__swbuf_r>
 800498c:	6813      	ldr	r3, [r2, #0]
 800498e:	1c58      	adds	r0, r3, #1
 8004990:	6010      	str	r0, [r2, #0]
 8004992:	7019      	strb	r1, [r3, #0]
 8004994:	4608      	mov	r0, r1
 8004996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800499a:	4770      	bx	lr

0800499c <__sfputs_r>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	4606      	mov	r6, r0
 80049a0:	460f      	mov	r7, r1
 80049a2:	4614      	mov	r4, r2
 80049a4:	18d5      	adds	r5, r2, r3
 80049a6:	42ac      	cmp	r4, r5
 80049a8:	d101      	bne.n	80049ae <__sfputs_r+0x12>
 80049aa:	2000      	movs	r0, #0
 80049ac:	e007      	b.n	80049be <__sfputs_r+0x22>
 80049ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b2:	463a      	mov	r2, r7
 80049b4:	4630      	mov	r0, r6
 80049b6:	f7ff ffda 	bl	800496e <__sfputc_r>
 80049ba:	1c43      	adds	r3, r0, #1
 80049bc:	d1f3      	bne.n	80049a6 <__sfputs_r+0xa>
 80049be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049c0 <_vfiprintf_r>:
 80049c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	460d      	mov	r5, r1
 80049c6:	b09d      	sub	sp, #116	; 0x74
 80049c8:	4614      	mov	r4, r2
 80049ca:	4698      	mov	r8, r3
 80049cc:	4606      	mov	r6, r0
 80049ce:	b118      	cbz	r0, 80049d8 <_vfiprintf_r+0x18>
 80049d0:	6a03      	ldr	r3, [r0, #32]
 80049d2:	b90b      	cbnz	r3, 80049d8 <_vfiprintf_r+0x18>
 80049d4:	f7ff fc38 	bl	8004248 <__sinit>
 80049d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049da:	07d9      	lsls	r1, r3, #31
 80049dc:	d405      	bmi.n	80049ea <_vfiprintf_r+0x2a>
 80049de:	89ab      	ldrh	r3, [r5, #12]
 80049e0:	059a      	lsls	r2, r3, #22
 80049e2:	d402      	bmi.n	80049ea <_vfiprintf_r+0x2a>
 80049e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049e6:	f7ff fdc2 	bl	800456e <__retarget_lock_acquire_recursive>
 80049ea:	89ab      	ldrh	r3, [r5, #12]
 80049ec:	071b      	lsls	r3, r3, #28
 80049ee:	d501      	bpl.n	80049f4 <_vfiprintf_r+0x34>
 80049f0:	692b      	ldr	r3, [r5, #16]
 80049f2:	b99b      	cbnz	r3, 8004a1c <_vfiprintf_r+0x5c>
 80049f4:	4629      	mov	r1, r5
 80049f6:	4630      	mov	r0, r6
 80049f8:	f000 faca 	bl	8004f90 <__swsetup_r>
 80049fc:	b170      	cbz	r0, 8004a1c <_vfiprintf_r+0x5c>
 80049fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a00:	07dc      	lsls	r4, r3, #31
 8004a02:	d504      	bpl.n	8004a0e <_vfiprintf_r+0x4e>
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a08:	b01d      	add	sp, #116	; 0x74
 8004a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0e:	89ab      	ldrh	r3, [r5, #12]
 8004a10:	0598      	lsls	r0, r3, #22
 8004a12:	d4f7      	bmi.n	8004a04 <_vfiprintf_r+0x44>
 8004a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a16:	f7ff fdab 	bl	8004570 <__retarget_lock_release_recursive>
 8004a1a:	e7f3      	b.n	8004a04 <_vfiprintf_r+0x44>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a20:	2320      	movs	r3, #32
 8004a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a2a:	2330      	movs	r3, #48	; 0x30
 8004a2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004be0 <_vfiprintf_r+0x220>
 8004a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a34:	f04f 0901 	mov.w	r9, #1
 8004a38:	4623      	mov	r3, r4
 8004a3a:	469a      	mov	sl, r3
 8004a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a40:	b10a      	cbz	r2, 8004a46 <_vfiprintf_r+0x86>
 8004a42:	2a25      	cmp	r2, #37	; 0x25
 8004a44:	d1f9      	bne.n	8004a3a <_vfiprintf_r+0x7a>
 8004a46:	ebba 0b04 	subs.w	fp, sl, r4
 8004a4a:	d00b      	beq.n	8004a64 <_vfiprintf_r+0xa4>
 8004a4c:	465b      	mov	r3, fp
 8004a4e:	4622      	mov	r2, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	4630      	mov	r0, r6
 8004a54:	f7ff ffa2 	bl	800499c <__sfputs_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	f000 80a9 	beq.w	8004bb0 <_vfiprintf_r+0x1f0>
 8004a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a60:	445a      	add	r2, fp
 8004a62:	9209      	str	r2, [sp, #36]	; 0x24
 8004a64:	f89a 3000 	ldrb.w	r3, [sl]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80a1 	beq.w	8004bb0 <_vfiprintf_r+0x1f0>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a78:	f10a 0a01 	add.w	sl, sl, #1
 8004a7c:	9304      	str	r3, [sp, #16]
 8004a7e:	9307      	str	r3, [sp, #28]
 8004a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a84:	931a      	str	r3, [sp, #104]	; 0x68
 8004a86:	4654      	mov	r4, sl
 8004a88:	2205      	movs	r2, #5
 8004a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a8e:	4854      	ldr	r0, [pc, #336]	; (8004be0 <_vfiprintf_r+0x220>)
 8004a90:	f7fb fbbe 	bl	8000210 <memchr>
 8004a94:	9a04      	ldr	r2, [sp, #16]
 8004a96:	b9d8      	cbnz	r0, 8004ad0 <_vfiprintf_r+0x110>
 8004a98:	06d1      	lsls	r1, r2, #27
 8004a9a:	bf44      	itt	mi
 8004a9c:	2320      	movmi	r3, #32
 8004a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aa2:	0713      	lsls	r3, r2, #28
 8004aa4:	bf44      	itt	mi
 8004aa6:	232b      	movmi	r3, #43	; 0x2b
 8004aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aac:	f89a 3000 	ldrb.w	r3, [sl]
 8004ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab2:	d015      	beq.n	8004ae0 <_vfiprintf_r+0x120>
 8004ab4:	9a07      	ldr	r2, [sp, #28]
 8004ab6:	4654      	mov	r4, sl
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f04f 0c0a 	mov.w	ip, #10
 8004abe:	4621      	mov	r1, r4
 8004ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ac4:	3b30      	subs	r3, #48	; 0x30
 8004ac6:	2b09      	cmp	r3, #9
 8004ac8:	d94d      	bls.n	8004b66 <_vfiprintf_r+0x1a6>
 8004aca:	b1b0      	cbz	r0, 8004afa <_vfiprintf_r+0x13a>
 8004acc:	9207      	str	r2, [sp, #28]
 8004ace:	e014      	b.n	8004afa <_vfiprintf_r+0x13a>
 8004ad0:	eba0 0308 	sub.w	r3, r0, r8
 8004ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	9304      	str	r3, [sp, #16]
 8004adc:	46a2      	mov	sl, r4
 8004ade:	e7d2      	b.n	8004a86 <_vfiprintf_r+0xc6>
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	1d19      	adds	r1, r3, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	9103      	str	r1, [sp, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bfbb      	ittet	lt
 8004aec:	425b      	neglt	r3, r3
 8004aee:	f042 0202 	orrlt.w	r2, r2, #2
 8004af2:	9307      	strge	r3, [sp, #28]
 8004af4:	9307      	strlt	r3, [sp, #28]
 8004af6:	bfb8      	it	lt
 8004af8:	9204      	strlt	r2, [sp, #16]
 8004afa:	7823      	ldrb	r3, [r4, #0]
 8004afc:	2b2e      	cmp	r3, #46	; 0x2e
 8004afe:	d10c      	bne.n	8004b1a <_vfiprintf_r+0x15a>
 8004b00:	7863      	ldrb	r3, [r4, #1]
 8004b02:	2b2a      	cmp	r3, #42	; 0x2a
 8004b04:	d134      	bne.n	8004b70 <_vfiprintf_r+0x1b0>
 8004b06:	9b03      	ldr	r3, [sp, #12]
 8004b08:	1d1a      	adds	r2, r3, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	9203      	str	r2, [sp, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bfb8      	it	lt
 8004b12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b16:	3402      	adds	r4, #2
 8004b18:	9305      	str	r3, [sp, #20]
 8004b1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004bf0 <_vfiprintf_r+0x230>
 8004b1e:	7821      	ldrb	r1, [r4, #0]
 8004b20:	2203      	movs	r2, #3
 8004b22:	4650      	mov	r0, sl
 8004b24:	f7fb fb74 	bl	8000210 <memchr>
 8004b28:	b138      	cbz	r0, 8004b3a <_vfiprintf_r+0x17a>
 8004b2a:	9b04      	ldr	r3, [sp, #16]
 8004b2c:	eba0 000a 	sub.w	r0, r0, sl
 8004b30:	2240      	movs	r2, #64	; 0x40
 8004b32:	4082      	lsls	r2, r0
 8004b34:	4313      	orrs	r3, r2
 8004b36:	3401      	adds	r4, #1
 8004b38:	9304      	str	r3, [sp, #16]
 8004b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b3e:	4829      	ldr	r0, [pc, #164]	; (8004be4 <_vfiprintf_r+0x224>)
 8004b40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b44:	2206      	movs	r2, #6
 8004b46:	f7fb fb63 	bl	8000210 <memchr>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d03f      	beq.n	8004bce <_vfiprintf_r+0x20e>
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <_vfiprintf_r+0x228>)
 8004b50:	bb1b      	cbnz	r3, 8004b9a <_vfiprintf_r+0x1da>
 8004b52:	9b03      	ldr	r3, [sp, #12]
 8004b54:	3307      	adds	r3, #7
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	9303      	str	r3, [sp, #12]
 8004b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b60:	443b      	add	r3, r7
 8004b62:	9309      	str	r3, [sp, #36]	; 0x24
 8004b64:	e768      	b.n	8004a38 <_vfiprintf_r+0x78>
 8004b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	2001      	movs	r0, #1
 8004b6e:	e7a6      	b.n	8004abe <_vfiprintf_r+0xfe>
 8004b70:	2300      	movs	r3, #0
 8004b72:	3401      	adds	r4, #1
 8004b74:	9305      	str	r3, [sp, #20]
 8004b76:	4619      	mov	r1, r3
 8004b78:	f04f 0c0a 	mov.w	ip, #10
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b82:	3a30      	subs	r2, #48	; 0x30
 8004b84:	2a09      	cmp	r2, #9
 8004b86:	d903      	bls.n	8004b90 <_vfiprintf_r+0x1d0>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0c6      	beq.n	8004b1a <_vfiprintf_r+0x15a>
 8004b8c:	9105      	str	r1, [sp, #20]
 8004b8e:	e7c4      	b.n	8004b1a <_vfiprintf_r+0x15a>
 8004b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b94:	4604      	mov	r4, r0
 8004b96:	2301      	movs	r3, #1
 8004b98:	e7f0      	b.n	8004b7c <_vfiprintf_r+0x1bc>
 8004b9a:	ab03      	add	r3, sp, #12
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	462a      	mov	r2, r5
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <_vfiprintf_r+0x22c>)
 8004ba2:	a904      	add	r1, sp, #16
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f3af 8000 	nop.w
 8004baa:	4607      	mov	r7, r0
 8004bac:	1c78      	adds	r0, r7, #1
 8004bae:	d1d6      	bne.n	8004b5e <_vfiprintf_r+0x19e>
 8004bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bb2:	07d9      	lsls	r1, r3, #31
 8004bb4:	d405      	bmi.n	8004bc2 <_vfiprintf_r+0x202>
 8004bb6:	89ab      	ldrh	r3, [r5, #12]
 8004bb8:	059a      	lsls	r2, r3, #22
 8004bba:	d402      	bmi.n	8004bc2 <_vfiprintf_r+0x202>
 8004bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bbe:	f7ff fcd7 	bl	8004570 <__retarget_lock_release_recursive>
 8004bc2:	89ab      	ldrh	r3, [r5, #12]
 8004bc4:	065b      	lsls	r3, r3, #25
 8004bc6:	f53f af1d 	bmi.w	8004a04 <_vfiprintf_r+0x44>
 8004bca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bcc:	e71c      	b.n	8004a08 <_vfiprintf_r+0x48>
 8004bce:	ab03      	add	r3, sp, #12
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	462a      	mov	r2, r5
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <_vfiprintf_r+0x22c>)
 8004bd6:	a904      	add	r1, sp, #16
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f000 f879 	bl	8004cd0 <_printf_i>
 8004bde:	e7e4      	b.n	8004baa <_vfiprintf_r+0x1ea>
 8004be0:	08005455 	.word	0x08005455
 8004be4:	0800545f 	.word	0x0800545f
 8004be8:	00000000 	.word	0x00000000
 8004bec:	0800499d 	.word	0x0800499d
 8004bf0:	0800545b 	.word	0x0800545b

08004bf4 <_printf_common>:
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	4699      	mov	r9, r3
 8004bfc:	688a      	ldr	r2, [r1, #8]
 8004bfe:	690b      	ldr	r3, [r1, #16]
 8004c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bfb8      	it	lt
 8004c08:	4613      	movlt	r3, r2
 8004c0a:	6033      	str	r3, [r6, #0]
 8004c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c10:	4607      	mov	r7, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	b10a      	cbz	r2, 8004c1a <_printf_common+0x26>
 8004c16:	3301      	adds	r3, #1
 8004c18:	6033      	str	r3, [r6, #0]
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	0699      	lsls	r1, r3, #26
 8004c1e:	bf42      	ittt	mi
 8004c20:	6833      	ldrmi	r3, [r6, #0]
 8004c22:	3302      	addmi	r3, #2
 8004c24:	6033      	strmi	r3, [r6, #0]
 8004c26:	6825      	ldr	r5, [r4, #0]
 8004c28:	f015 0506 	ands.w	r5, r5, #6
 8004c2c:	d106      	bne.n	8004c3c <_printf_common+0x48>
 8004c2e:	f104 0a19 	add.w	sl, r4, #25
 8004c32:	68e3      	ldr	r3, [r4, #12]
 8004c34:	6832      	ldr	r2, [r6, #0]
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	42ab      	cmp	r3, r5
 8004c3a:	dc26      	bgt.n	8004c8a <_printf_common+0x96>
 8004c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c40:	1e13      	subs	r3, r2, #0
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	bf18      	it	ne
 8004c46:	2301      	movne	r3, #1
 8004c48:	0692      	lsls	r2, r2, #26
 8004c4a:	d42b      	bmi.n	8004ca4 <_printf_common+0xb0>
 8004c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c50:	4649      	mov	r1, r9
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c0      	blx	r8
 8004c56:	3001      	adds	r0, #1
 8004c58:	d01e      	beq.n	8004c98 <_printf_common+0xa4>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	6922      	ldr	r2, [r4, #16]
 8004c5e:	f003 0306 	and.w	r3, r3, #6
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	bf02      	ittt	eq
 8004c66:	68e5      	ldreq	r5, [r4, #12]
 8004c68:	6833      	ldreq	r3, [r6, #0]
 8004c6a:	1aed      	subeq	r5, r5, r3
 8004c6c:	68a3      	ldr	r3, [r4, #8]
 8004c6e:	bf0c      	ite	eq
 8004c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c74:	2500      	movne	r5, #0
 8004c76:	4293      	cmp	r3, r2
 8004c78:	bfc4      	itt	gt
 8004c7a:	1a9b      	subgt	r3, r3, r2
 8004c7c:	18ed      	addgt	r5, r5, r3
 8004c7e:	2600      	movs	r6, #0
 8004c80:	341a      	adds	r4, #26
 8004c82:	42b5      	cmp	r5, r6
 8004c84:	d11a      	bne.n	8004cbc <_printf_common+0xc8>
 8004c86:	2000      	movs	r0, #0
 8004c88:	e008      	b.n	8004c9c <_printf_common+0xa8>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4652      	mov	r2, sl
 8004c8e:	4649      	mov	r1, r9
 8004c90:	4638      	mov	r0, r7
 8004c92:	47c0      	blx	r8
 8004c94:	3001      	adds	r0, #1
 8004c96:	d103      	bne.n	8004ca0 <_printf_common+0xac>
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca0:	3501      	adds	r5, #1
 8004ca2:	e7c6      	b.n	8004c32 <_printf_common+0x3e>
 8004ca4:	18e1      	adds	r1, r4, r3
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	2030      	movs	r0, #48	; 0x30
 8004caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cae:	4422      	add	r2, r4
 8004cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cb8:	3302      	adds	r3, #2
 8004cba:	e7c7      	b.n	8004c4c <_printf_common+0x58>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	47c0      	blx	r8
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d0e6      	beq.n	8004c98 <_printf_common+0xa4>
 8004cca:	3601      	adds	r6, #1
 8004ccc:	e7d9      	b.n	8004c82 <_printf_common+0x8e>
	...

08004cd0 <_printf_i>:
 8004cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd4:	7e0f      	ldrb	r7, [r1, #24]
 8004cd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cd8:	2f78      	cmp	r7, #120	; 0x78
 8004cda:	4691      	mov	r9, r2
 8004cdc:	4680      	mov	r8, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	469a      	mov	sl, r3
 8004ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ce6:	d807      	bhi.n	8004cf8 <_printf_i+0x28>
 8004ce8:	2f62      	cmp	r7, #98	; 0x62
 8004cea:	d80a      	bhi.n	8004d02 <_printf_i+0x32>
 8004cec:	2f00      	cmp	r7, #0
 8004cee:	f000 80d4 	beq.w	8004e9a <_printf_i+0x1ca>
 8004cf2:	2f58      	cmp	r7, #88	; 0x58
 8004cf4:	f000 80c0 	beq.w	8004e78 <_printf_i+0x1a8>
 8004cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d00:	e03a      	b.n	8004d78 <_printf_i+0xa8>
 8004d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d06:	2b15      	cmp	r3, #21
 8004d08:	d8f6      	bhi.n	8004cf8 <_printf_i+0x28>
 8004d0a:	a101      	add	r1, pc, #4	; (adr r1, 8004d10 <_printf_i+0x40>)
 8004d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d10:	08004d69 	.word	0x08004d69
 8004d14:	08004d7d 	.word	0x08004d7d
 8004d18:	08004cf9 	.word	0x08004cf9
 8004d1c:	08004cf9 	.word	0x08004cf9
 8004d20:	08004cf9 	.word	0x08004cf9
 8004d24:	08004cf9 	.word	0x08004cf9
 8004d28:	08004d7d 	.word	0x08004d7d
 8004d2c:	08004cf9 	.word	0x08004cf9
 8004d30:	08004cf9 	.word	0x08004cf9
 8004d34:	08004cf9 	.word	0x08004cf9
 8004d38:	08004cf9 	.word	0x08004cf9
 8004d3c:	08004e81 	.word	0x08004e81
 8004d40:	08004da9 	.word	0x08004da9
 8004d44:	08004e3b 	.word	0x08004e3b
 8004d48:	08004cf9 	.word	0x08004cf9
 8004d4c:	08004cf9 	.word	0x08004cf9
 8004d50:	08004ea3 	.word	0x08004ea3
 8004d54:	08004cf9 	.word	0x08004cf9
 8004d58:	08004da9 	.word	0x08004da9
 8004d5c:	08004cf9 	.word	0x08004cf9
 8004d60:	08004cf9 	.word	0x08004cf9
 8004d64:	08004e43 	.word	0x08004e43
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	1d1a      	adds	r2, r3, #4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	602a      	str	r2, [r5, #0]
 8004d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e09f      	b.n	8004ebc <_printf_i+0x1ec>
 8004d7c:	6820      	ldr	r0, [r4, #0]
 8004d7e:	682b      	ldr	r3, [r5, #0]
 8004d80:	0607      	lsls	r7, r0, #24
 8004d82:	f103 0104 	add.w	r1, r3, #4
 8004d86:	6029      	str	r1, [r5, #0]
 8004d88:	d501      	bpl.n	8004d8e <_printf_i+0xbe>
 8004d8a:	681e      	ldr	r6, [r3, #0]
 8004d8c:	e003      	b.n	8004d96 <_printf_i+0xc6>
 8004d8e:	0646      	lsls	r6, r0, #25
 8004d90:	d5fb      	bpl.n	8004d8a <_printf_i+0xba>
 8004d92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d96:	2e00      	cmp	r6, #0
 8004d98:	da03      	bge.n	8004da2 <_printf_i+0xd2>
 8004d9a:	232d      	movs	r3, #45	; 0x2d
 8004d9c:	4276      	negs	r6, r6
 8004d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da2:	485a      	ldr	r0, [pc, #360]	; (8004f0c <_printf_i+0x23c>)
 8004da4:	230a      	movs	r3, #10
 8004da6:	e012      	b.n	8004dce <_printf_i+0xfe>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	6820      	ldr	r0, [r4, #0]
 8004dac:	1d19      	adds	r1, r3, #4
 8004dae:	6029      	str	r1, [r5, #0]
 8004db0:	0605      	lsls	r5, r0, #24
 8004db2:	d501      	bpl.n	8004db8 <_printf_i+0xe8>
 8004db4:	681e      	ldr	r6, [r3, #0]
 8004db6:	e002      	b.n	8004dbe <_printf_i+0xee>
 8004db8:	0641      	lsls	r1, r0, #25
 8004dba:	d5fb      	bpl.n	8004db4 <_printf_i+0xe4>
 8004dbc:	881e      	ldrh	r6, [r3, #0]
 8004dbe:	4853      	ldr	r0, [pc, #332]	; (8004f0c <_printf_i+0x23c>)
 8004dc0:	2f6f      	cmp	r7, #111	; 0x6f
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2308      	moveq	r3, #8
 8004dc6:	230a      	movne	r3, #10
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dce:	6865      	ldr	r5, [r4, #4]
 8004dd0:	60a5      	str	r5, [r4, #8]
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	bfa2      	ittt	ge
 8004dd6:	6821      	ldrge	r1, [r4, #0]
 8004dd8:	f021 0104 	bicge.w	r1, r1, #4
 8004ddc:	6021      	strge	r1, [r4, #0]
 8004dde:	b90e      	cbnz	r6, 8004de4 <_printf_i+0x114>
 8004de0:	2d00      	cmp	r5, #0
 8004de2:	d04b      	beq.n	8004e7c <_printf_i+0x1ac>
 8004de4:	4615      	mov	r5, r2
 8004de6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dea:	fb03 6711 	mls	r7, r3, r1, r6
 8004dee:	5dc7      	ldrb	r7, [r0, r7]
 8004df0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004df4:	4637      	mov	r7, r6
 8004df6:	42bb      	cmp	r3, r7
 8004df8:	460e      	mov	r6, r1
 8004dfa:	d9f4      	bls.n	8004de6 <_printf_i+0x116>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d10b      	bne.n	8004e18 <_printf_i+0x148>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	07de      	lsls	r6, r3, #31
 8004e04:	d508      	bpl.n	8004e18 <_printf_i+0x148>
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	6861      	ldr	r1, [r4, #4]
 8004e0a:	4299      	cmp	r1, r3
 8004e0c:	bfde      	ittt	le
 8004e0e:	2330      	movle	r3, #48	; 0x30
 8004e10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e18:	1b52      	subs	r2, r2, r5
 8004e1a:	6122      	str	r2, [r4, #16]
 8004e1c:	f8cd a000 	str.w	sl, [sp]
 8004e20:	464b      	mov	r3, r9
 8004e22:	aa03      	add	r2, sp, #12
 8004e24:	4621      	mov	r1, r4
 8004e26:	4640      	mov	r0, r8
 8004e28:	f7ff fee4 	bl	8004bf4 <_printf_common>
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d14a      	bne.n	8004ec6 <_printf_i+0x1f6>
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e34:	b004      	add	sp, #16
 8004e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	f043 0320 	orr.w	r3, r3, #32
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	4833      	ldr	r0, [pc, #204]	; (8004f10 <_printf_i+0x240>)
 8004e44:	2778      	movs	r7, #120	; 0x78
 8004e46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	6829      	ldr	r1, [r5, #0]
 8004e4e:	061f      	lsls	r7, r3, #24
 8004e50:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e54:	d402      	bmi.n	8004e5c <_printf_i+0x18c>
 8004e56:	065f      	lsls	r7, r3, #25
 8004e58:	bf48      	it	mi
 8004e5a:	b2b6      	uxthmi	r6, r6
 8004e5c:	07df      	lsls	r7, r3, #31
 8004e5e:	bf48      	it	mi
 8004e60:	f043 0320 	orrmi.w	r3, r3, #32
 8004e64:	6029      	str	r1, [r5, #0]
 8004e66:	bf48      	it	mi
 8004e68:	6023      	strmi	r3, [r4, #0]
 8004e6a:	b91e      	cbnz	r6, 8004e74 <_printf_i+0x1a4>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	f023 0320 	bic.w	r3, r3, #32
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	2310      	movs	r3, #16
 8004e76:	e7a7      	b.n	8004dc8 <_printf_i+0xf8>
 8004e78:	4824      	ldr	r0, [pc, #144]	; (8004f0c <_printf_i+0x23c>)
 8004e7a:	e7e4      	b.n	8004e46 <_printf_i+0x176>
 8004e7c:	4615      	mov	r5, r2
 8004e7e:	e7bd      	b.n	8004dfc <_printf_i+0x12c>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	6826      	ldr	r6, [r4, #0]
 8004e84:	6961      	ldr	r1, [r4, #20]
 8004e86:	1d18      	adds	r0, r3, #4
 8004e88:	6028      	str	r0, [r5, #0]
 8004e8a:	0635      	lsls	r5, r6, #24
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	d501      	bpl.n	8004e94 <_printf_i+0x1c4>
 8004e90:	6019      	str	r1, [r3, #0]
 8004e92:	e002      	b.n	8004e9a <_printf_i+0x1ca>
 8004e94:	0670      	lsls	r0, r6, #25
 8004e96:	d5fb      	bpl.n	8004e90 <_printf_i+0x1c0>
 8004e98:	8019      	strh	r1, [r3, #0]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6123      	str	r3, [r4, #16]
 8004e9e:	4615      	mov	r5, r2
 8004ea0:	e7bc      	b.n	8004e1c <_printf_i+0x14c>
 8004ea2:	682b      	ldr	r3, [r5, #0]
 8004ea4:	1d1a      	adds	r2, r3, #4
 8004ea6:	602a      	str	r2, [r5, #0]
 8004ea8:	681d      	ldr	r5, [r3, #0]
 8004eaa:	6862      	ldr	r2, [r4, #4]
 8004eac:	2100      	movs	r1, #0
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f7fb f9ae 	bl	8000210 <memchr>
 8004eb4:	b108      	cbz	r0, 8004eba <_printf_i+0x1ea>
 8004eb6:	1b40      	subs	r0, r0, r5
 8004eb8:	6060      	str	r0, [r4, #4]
 8004eba:	6863      	ldr	r3, [r4, #4]
 8004ebc:	6123      	str	r3, [r4, #16]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec4:	e7aa      	b.n	8004e1c <_printf_i+0x14c>
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4649      	mov	r1, r9
 8004ecc:	4640      	mov	r0, r8
 8004ece:	47d0      	blx	sl
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d0ad      	beq.n	8004e30 <_printf_i+0x160>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	079b      	lsls	r3, r3, #30
 8004ed8:	d413      	bmi.n	8004f02 <_printf_i+0x232>
 8004eda:	68e0      	ldr	r0, [r4, #12]
 8004edc:	9b03      	ldr	r3, [sp, #12]
 8004ede:	4298      	cmp	r0, r3
 8004ee0:	bfb8      	it	lt
 8004ee2:	4618      	movlt	r0, r3
 8004ee4:	e7a6      	b.n	8004e34 <_printf_i+0x164>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4632      	mov	r2, r6
 8004eea:	4649      	mov	r1, r9
 8004eec:	4640      	mov	r0, r8
 8004eee:	47d0      	blx	sl
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d09d      	beq.n	8004e30 <_printf_i+0x160>
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	68e3      	ldr	r3, [r4, #12]
 8004ef8:	9903      	ldr	r1, [sp, #12]
 8004efa:	1a5b      	subs	r3, r3, r1
 8004efc:	42ab      	cmp	r3, r5
 8004efe:	dcf2      	bgt.n	8004ee6 <_printf_i+0x216>
 8004f00:	e7eb      	b.n	8004eda <_printf_i+0x20a>
 8004f02:	2500      	movs	r5, #0
 8004f04:	f104 0619 	add.w	r6, r4, #25
 8004f08:	e7f5      	b.n	8004ef6 <_printf_i+0x226>
 8004f0a:	bf00      	nop
 8004f0c:	08005466 	.word	0x08005466
 8004f10:	08005477 	.word	0x08005477

08004f14 <__swbuf_r>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	460e      	mov	r6, r1
 8004f18:	4614      	mov	r4, r2
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	b118      	cbz	r0, 8004f26 <__swbuf_r+0x12>
 8004f1e:	6a03      	ldr	r3, [r0, #32]
 8004f20:	b90b      	cbnz	r3, 8004f26 <__swbuf_r+0x12>
 8004f22:	f7ff f991 	bl	8004248 <__sinit>
 8004f26:	69a3      	ldr	r3, [r4, #24]
 8004f28:	60a3      	str	r3, [r4, #8]
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	071a      	lsls	r2, r3, #28
 8004f2e:	d525      	bpl.n	8004f7c <__swbuf_r+0x68>
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	b31b      	cbz	r3, 8004f7c <__swbuf_r+0x68>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	6922      	ldr	r2, [r4, #16]
 8004f38:	1a98      	subs	r0, r3, r2
 8004f3a:	6963      	ldr	r3, [r4, #20]
 8004f3c:	b2f6      	uxtb	r6, r6
 8004f3e:	4283      	cmp	r3, r0
 8004f40:	4637      	mov	r7, r6
 8004f42:	dc04      	bgt.n	8004f4e <__swbuf_r+0x3a>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7ff fcc0 	bl	80048cc <_fflush_r>
 8004f4c:	b9e0      	cbnz	r0, 8004f88 <__swbuf_r+0x74>
 8004f4e:	68a3      	ldr	r3, [r4, #8]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	60a3      	str	r3, [r4, #8]
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	701e      	strb	r6, [r3, #0]
 8004f5c:	6962      	ldr	r2, [r4, #20]
 8004f5e:	1c43      	adds	r3, r0, #1
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d004      	beq.n	8004f6e <__swbuf_r+0x5a>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	07db      	lsls	r3, r3, #31
 8004f68:	d506      	bpl.n	8004f78 <__swbuf_r+0x64>
 8004f6a:	2e0a      	cmp	r6, #10
 8004f6c:	d104      	bne.n	8004f78 <__swbuf_r+0x64>
 8004f6e:	4621      	mov	r1, r4
 8004f70:	4628      	mov	r0, r5
 8004f72:	f7ff fcab 	bl	80048cc <_fflush_r>
 8004f76:	b938      	cbnz	r0, 8004f88 <__swbuf_r+0x74>
 8004f78:	4638      	mov	r0, r7
 8004f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f000 f806 	bl	8004f90 <__swsetup_r>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d0d5      	beq.n	8004f34 <__swbuf_r+0x20>
 8004f88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004f8c:	e7f4      	b.n	8004f78 <__swbuf_r+0x64>
	...

08004f90 <__swsetup_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4b2a      	ldr	r3, [pc, #168]	; (800503c <__swsetup_r+0xac>)
 8004f94:	4605      	mov	r5, r0
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	460c      	mov	r4, r1
 8004f9a:	b118      	cbz	r0, 8004fa4 <__swsetup_r+0x14>
 8004f9c:	6a03      	ldr	r3, [r0, #32]
 8004f9e:	b90b      	cbnz	r3, 8004fa4 <__swsetup_r+0x14>
 8004fa0:	f7ff f952 	bl	8004248 <__sinit>
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004faa:	0718      	lsls	r0, r3, #28
 8004fac:	d422      	bmi.n	8004ff4 <__swsetup_r+0x64>
 8004fae:	06d9      	lsls	r1, r3, #27
 8004fb0:	d407      	bmi.n	8004fc2 <__swsetup_r+0x32>
 8004fb2:	2309      	movs	r3, #9
 8004fb4:	602b      	str	r3, [r5, #0]
 8004fb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc0:	e034      	b.n	800502c <__swsetup_r+0x9c>
 8004fc2:	0758      	lsls	r0, r3, #29
 8004fc4:	d512      	bpl.n	8004fec <__swsetup_r+0x5c>
 8004fc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fc8:	b141      	cbz	r1, 8004fdc <__swsetup_r+0x4c>
 8004fca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fce:	4299      	cmp	r1, r3
 8004fd0:	d002      	beq.n	8004fd8 <__swsetup_r+0x48>
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f7ff faf4 	bl	80045c0 <_free_r>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	6363      	str	r3, [r4, #52]	; 0x34
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fe2:	81a3      	strh	r3, [r4, #12]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	6063      	str	r3, [r4, #4]
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	6023      	str	r3, [r4, #0]
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	f043 0308 	orr.w	r3, r3, #8
 8004ff2:	81a3      	strh	r3, [r4, #12]
 8004ff4:	6923      	ldr	r3, [r4, #16]
 8004ff6:	b94b      	cbnz	r3, 800500c <__swsetup_r+0x7c>
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005002:	d003      	beq.n	800500c <__swsetup_r+0x7c>
 8005004:	4621      	mov	r1, r4
 8005006:	4628      	mov	r0, r5
 8005008:	f000 f884 	bl	8005114 <__smakebuf_r>
 800500c:	89a0      	ldrh	r0, [r4, #12]
 800500e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005012:	f010 0301 	ands.w	r3, r0, #1
 8005016:	d00a      	beq.n	800502e <__swsetup_r+0x9e>
 8005018:	2300      	movs	r3, #0
 800501a:	60a3      	str	r3, [r4, #8]
 800501c:	6963      	ldr	r3, [r4, #20]
 800501e:	425b      	negs	r3, r3
 8005020:	61a3      	str	r3, [r4, #24]
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	b943      	cbnz	r3, 8005038 <__swsetup_r+0xa8>
 8005026:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800502a:	d1c4      	bne.n	8004fb6 <__swsetup_r+0x26>
 800502c:	bd38      	pop	{r3, r4, r5, pc}
 800502e:	0781      	lsls	r1, r0, #30
 8005030:	bf58      	it	pl
 8005032:	6963      	ldrpl	r3, [r4, #20]
 8005034:	60a3      	str	r3, [r4, #8]
 8005036:	e7f4      	b.n	8005022 <__swsetup_r+0x92>
 8005038:	2000      	movs	r0, #0
 800503a:	e7f7      	b.n	800502c <__swsetup_r+0x9c>
 800503c:	200000fc 	.word	0x200000fc

08005040 <_raise_r>:
 8005040:	291f      	cmp	r1, #31
 8005042:	b538      	push	{r3, r4, r5, lr}
 8005044:	4604      	mov	r4, r0
 8005046:	460d      	mov	r5, r1
 8005048:	d904      	bls.n	8005054 <_raise_r+0x14>
 800504a:	2316      	movs	r3, #22
 800504c:	6003      	str	r3, [r0, #0]
 800504e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005056:	b112      	cbz	r2, 800505e <_raise_r+0x1e>
 8005058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800505c:	b94b      	cbnz	r3, 8005072 <_raise_r+0x32>
 800505e:	4620      	mov	r0, r4
 8005060:	f000 f830 	bl	80050c4 <_getpid_r>
 8005064:	462a      	mov	r2, r5
 8005066:	4601      	mov	r1, r0
 8005068:	4620      	mov	r0, r4
 800506a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800506e:	f000 b817 	b.w	80050a0 <_kill_r>
 8005072:	2b01      	cmp	r3, #1
 8005074:	d00a      	beq.n	800508c <_raise_r+0x4c>
 8005076:	1c59      	adds	r1, r3, #1
 8005078:	d103      	bne.n	8005082 <_raise_r+0x42>
 800507a:	2316      	movs	r3, #22
 800507c:	6003      	str	r3, [r0, #0]
 800507e:	2001      	movs	r0, #1
 8005080:	e7e7      	b.n	8005052 <_raise_r+0x12>
 8005082:	2400      	movs	r4, #0
 8005084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005088:	4628      	mov	r0, r5
 800508a:	4798      	blx	r3
 800508c:	2000      	movs	r0, #0
 800508e:	e7e0      	b.n	8005052 <_raise_r+0x12>

08005090 <raise>:
 8005090:	4b02      	ldr	r3, [pc, #8]	; (800509c <raise+0xc>)
 8005092:	4601      	mov	r1, r0
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	f7ff bfd3 	b.w	8005040 <_raise_r>
 800509a:	bf00      	nop
 800509c:	200000fc 	.word	0x200000fc

080050a0 <_kill_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4d07      	ldr	r5, [pc, #28]	; (80050c0 <_kill_r+0x20>)
 80050a4:	2300      	movs	r3, #0
 80050a6:	4604      	mov	r4, r0
 80050a8:	4608      	mov	r0, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	f7fc fde7 	bl	8001c80 <_kill>
 80050b2:	1c43      	adds	r3, r0, #1
 80050b4:	d102      	bne.n	80050bc <_kill_r+0x1c>
 80050b6:	682b      	ldr	r3, [r5, #0]
 80050b8:	b103      	cbz	r3, 80050bc <_kill_r+0x1c>
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	bd38      	pop	{r3, r4, r5, pc}
 80050be:	bf00      	nop
 80050c0:	20000664 	.word	0x20000664

080050c4 <_getpid_r>:
 80050c4:	f7fc bdd4 	b.w	8001c70 <_getpid>

080050c8 <__swhatbuf_r>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	460c      	mov	r4, r1
 80050cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d0:	2900      	cmp	r1, #0
 80050d2:	b096      	sub	sp, #88	; 0x58
 80050d4:	4615      	mov	r5, r2
 80050d6:	461e      	mov	r6, r3
 80050d8:	da0d      	bge.n	80050f6 <__swhatbuf_r+0x2e>
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050e0:	f04f 0100 	mov.w	r1, #0
 80050e4:	bf0c      	ite	eq
 80050e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80050ea:	2340      	movne	r3, #64	; 0x40
 80050ec:	2000      	movs	r0, #0
 80050ee:	6031      	str	r1, [r6, #0]
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	b016      	add	sp, #88	; 0x58
 80050f4:	bd70      	pop	{r4, r5, r6, pc}
 80050f6:	466a      	mov	r2, sp
 80050f8:	f000 f848 	bl	800518c <_fstat_r>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	dbec      	blt.n	80050da <__swhatbuf_r+0x12>
 8005100:	9901      	ldr	r1, [sp, #4]
 8005102:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005106:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800510a:	4259      	negs	r1, r3
 800510c:	4159      	adcs	r1, r3
 800510e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005112:	e7eb      	b.n	80050ec <__swhatbuf_r+0x24>

08005114 <__smakebuf_r>:
 8005114:	898b      	ldrh	r3, [r1, #12]
 8005116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005118:	079d      	lsls	r5, r3, #30
 800511a:	4606      	mov	r6, r0
 800511c:	460c      	mov	r4, r1
 800511e:	d507      	bpl.n	8005130 <__smakebuf_r+0x1c>
 8005120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	6123      	str	r3, [r4, #16]
 8005128:	2301      	movs	r3, #1
 800512a:	6163      	str	r3, [r4, #20]
 800512c:	b002      	add	sp, #8
 800512e:	bd70      	pop	{r4, r5, r6, pc}
 8005130:	ab01      	add	r3, sp, #4
 8005132:	466a      	mov	r2, sp
 8005134:	f7ff ffc8 	bl	80050c8 <__swhatbuf_r>
 8005138:	9900      	ldr	r1, [sp, #0]
 800513a:	4605      	mov	r5, r0
 800513c:	4630      	mov	r0, r6
 800513e:	f7ff fab3 	bl	80046a8 <_malloc_r>
 8005142:	b948      	cbnz	r0, 8005158 <__smakebuf_r+0x44>
 8005144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005148:	059a      	lsls	r2, r3, #22
 800514a:	d4ef      	bmi.n	800512c <__smakebuf_r+0x18>
 800514c:	f023 0303 	bic.w	r3, r3, #3
 8005150:	f043 0302 	orr.w	r3, r3, #2
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	e7e3      	b.n	8005120 <__smakebuf_r+0xc>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	6020      	str	r0, [r4, #0]
 800515c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005160:	81a3      	strh	r3, [r4, #12]
 8005162:	9b00      	ldr	r3, [sp, #0]
 8005164:	6163      	str	r3, [r4, #20]
 8005166:	9b01      	ldr	r3, [sp, #4]
 8005168:	6120      	str	r0, [r4, #16]
 800516a:	b15b      	cbz	r3, 8005184 <__smakebuf_r+0x70>
 800516c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005170:	4630      	mov	r0, r6
 8005172:	f000 f81d 	bl	80051b0 <_isatty_r>
 8005176:	b128      	cbz	r0, 8005184 <__smakebuf_r+0x70>
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	f023 0303 	bic.w	r3, r3, #3
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	81a3      	strh	r3, [r4, #12]
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	431d      	orrs	r5, r3
 8005188:	81a5      	strh	r5, [r4, #12]
 800518a:	e7cf      	b.n	800512c <__smakebuf_r+0x18>

0800518c <_fstat_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4d07      	ldr	r5, [pc, #28]	; (80051ac <_fstat_r+0x20>)
 8005190:	2300      	movs	r3, #0
 8005192:	4604      	mov	r4, r0
 8005194:	4608      	mov	r0, r1
 8005196:	4611      	mov	r1, r2
 8005198:	602b      	str	r3, [r5, #0]
 800519a:	f7fc fdd0 	bl	8001d3e <_fstat>
 800519e:	1c43      	adds	r3, r0, #1
 80051a0:	d102      	bne.n	80051a8 <_fstat_r+0x1c>
 80051a2:	682b      	ldr	r3, [r5, #0]
 80051a4:	b103      	cbz	r3, 80051a8 <_fstat_r+0x1c>
 80051a6:	6023      	str	r3, [r4, #0]
 80051a8:	bd38      	pop	{r3, r4, r5, pc}
 80051aa:	bf00      	nop
 80051ac:	20000664 	.word	0x20000664

080051b0 <_isatty_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4d06      	ldr	r5, [pc, #24]	; (80051cc <_isatty_r+0x1c>)
 80051b4:	2300      	movs	r3, #0
 80051b6:	4604      	mov	r4, r0
 80051b8:	4608      	mov	r0, r1
 80051ba:	602b      	str	r3, [r5, #0]
 80051bc:	f7fc fdcf 	bl	8001d5e <_isatty>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_isatty_r+0x1a>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_isatty_r+0x1a>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	20000664 	.word	0x20000664

080051d0 <_init>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr

080051dc <_fini>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	bf00      	nop
 80051e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e2:	bc08      	pop	{r3}
 80051e4:	469e      	mov	lr, r3
 80051e6:	4770      	bx	lr
